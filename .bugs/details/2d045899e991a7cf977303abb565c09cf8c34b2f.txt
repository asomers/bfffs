# Lines starting with '#' and sections without content
# are not displayed by a call to 'details'
#
[paths]
# Paths related to this bug.
# suggested format: REPO_PATH:LINENUMBERS


[details]
Sometimes I get a failure during common::clean_zone::t::clean_zone_leak.  It
happens about 5-10% of the time.  The error message indicates that during a
range scan, a leaf with no items was found.  This shouldn't be possible.

[expected]
# The expected result


[actual]
Before cleaning: 255719 free out of 262144
After cleaning: 255829 free out of 262144
thread 'common::clean_zone::t::clean_zone_leak' panicked at 'called `Option::unwrap()` on a `None` value', libcore/option.rs:345:21
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
   1: std::sys_common::backtrace::print
   2: std::panicking::default_hook::{{closure}}
   3: std::panicking::default_hook
   4: std::panicking::rust_panic_with_hook
   5: std::panicking::continue_panic_fmt
   6: rust_begin_unwind
   7: core::panicking::panic_fmt
   8: core::panicking::panic
   9: <core::option::Option<T>>::unwrap
  10: <bfffs::common::tree::node::NodeData<A, K, V>>::key
             at src/common/tree/node.rs:688
  11: <bfffs::common::tree::Tree<A, D, K, V>>::get_range_r
             at ./src/common/tree/mod.rs:857
  12: <bfffs::common::tree::Tree<A, D, K, V>>::get_range_r::{{closure}}
             at ./src/common/tree/mod.rs:926
  13: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll::{{closure}}::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:34
  14: <core::result::Result<T, E>>::map
             at /checkout/src/libcore/result.rs:468
  15: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:33
  16: <futures::future::chain::Chain<A, B, C>>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/chain.rs:39
  17: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:32
  18: <alloc::boxed::Box<F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/mod.rs:113
  19: <futures::future::chain::Chain<A, B, C>>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/chain.rs:42
  20: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:32
  21: <alloc::boxed::Box<F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/mod.rs:113
  22: <futures::future::chain::Chain<A, B, C>>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/chain.rs:42
  23: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:32
  24: <alloc::boxed::Box<F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/mod.rs:113
  25: <futures::future::chain::Chain<A, B, C>>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/chain.rs:42
  26: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:32
  27: <futures::future::chain::Chain<A, B, C>>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/chain.rs:42
  28: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:32
  29: <alloc::boxed::Box<F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/mod.rs:113
  30: <bfffs::common::tree::RangeQuery<A, D, K, T, V> as futures::stream::Stream>::poll::{{closure}}
             at ./src/common/tree/mod.rs:206
  31: <core::option::Option<T>>::unwrap_or_else
             at /checkout/src/libcore/option.rs:386
  32: <bfffs::common::tree::RangeQuery<A, D, K, T, V> as futures::stream::Stream>::poll
             at ./src/common/tree/mod.rs:196
  33: <futures::stream::fold::Fold<S, F, Fut, T> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/stream/fold.rs:56
  34: <futures::future::join::MaybeDone<A>>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/join.rs:153
  35: <futures::future::join::Join<A, B> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/join.rs:67
  36: <futures::future::map::Map<A, F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/map.rs:30
  37: <futures::future::chain::Chain<A, B, C>>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/chain.rs:26
  38: <futures::future::and_then::AndThen<A, B, F> as futures::future::Future>::poll
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/and_then.rs:32
  39: <futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/mod.rs:314
  40: <futures::task_impl::Spawn<T>>::enter::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/mod.rs:388
  41: futures::task_impl::std::set
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/std/mod.rs:78
  42: <futures::task_impl::Spawn<T>>::enter
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/mod.rs:388
  43: <futures::task_impl::Spawn<T>>::poll_future_notify
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/mod.rs:314
  44: futures::task_impl::std::<impl futures::task_impl::Spawn<F>>::wait_future::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/std/mod.rs:231
  45: futures::task_impl::std::ThreadNotify::with_current::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/std/mod.rs:478
  46: <std::thread::local::LocalKey<T>>::try_with
             at /checkout/src/libstd/thread/local.rs:294
  47: <std::thread::local::LocalKey<T>>::with
             at /checkout/src/libstd/thread/local.rs:248
  48: futures::task_impl::std::ThreadNotify::with_current
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/std/mod.rs:478
  49: futures::task_impl::std::<impl futures::task_impl::Spawn<F>>::wait_future
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/task_impl/std/mod.rs:228
  50: futures::future::Future::wait
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-0.1.24/src/future/mod.rs:299
  51: tokio_io_pool::Runtime::block_on::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-io-pool-0.1.4/src/lib.rs:407
  52: tokio_executor::global::with_default::{{closure}}
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.4/src/global.rs:173
  53: <std::thread::local::LocalKey<T>>::try_with
             at /checkout/src/libstd/thread/local.rs:294
  54: <std::thread::local::LocalKey<T>>::with
             at /checkout/src/libstd/thread/local.rs:248
  55: tokio_executor::global::with_default
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.4/src/global.rs:143
  56: tokio_io_pool::Runtime::block_on
             at /usr/home/somers/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-io-pool-0.1.4/src/lib.rs:407
  57: mod::common::clean_zone::t::clean_zone_leak::{{closure}}
             at tests/common/clean_zone.rs:125
  58: core::ops::function::FnOnce::call_once
             at /checkout/src/libcore/ops/function.rs:238
  59: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /checkout/src/libstd/panic.rs:313
  60: std::panicking::try::do_call
             at /checkout/src/libstd/panicking.rs:310
  61: __rust_maybe_catch_panic
             at libpanic_unwind/lib.rs:103
  62: std::panicking::try
             at /checkout/src/libstd/panicking.rs:289
  63: std::panic::catch_unwind
             at /checkout/src/libstd/panic.rs:392
  64: mod::common::clean_zone::t::clean_zone_leak
             at ./<test macros>:41
  65: mod::common::clean_zone::t::clean_zone_leak::{{closure}}
             at ./<test macros>:38
  66: core::ops::function::FnOnce::call_once
             at /checkout/src/libcore/ops/function.rs:238
  67: <F as alloc::boxed::FnBox<A>>::call_box
  68: __rust_maybe_catch_panic
             at libpanic_unwind/lib.rs:103
The above error occured with the following parameterisation of the test case:
    mocks { devsize: 1073741824, zone_size: 512 }

thread 'common::clean_zone::t::clean_zone_leak' panicked at 'Some parameterised test cases failed', tests/common/clean_zone.rs:11:1
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
   1: std::sys_common::backtrace::print
   2: std::panicking::default_hook::{{closure}}
   3: std::panicking::default_hook
   4: std::panicking::rust_panic_with_hook
   5: std::panicking::begin_panic
             at /checkout/src/libstd/panicking.rs:411
   6: mod::common::clean_zone::t::clean_zone_leak
             at ./<test macros>:43
   7: mod::common::clean_zone::t::clean_zone_leak::{{closure}}
             at ./<test macros>:38
   8: core::ops::function::FnOnce::call_once
             at /checkout/src/libcore/ops/function.rs:238
   9: <F as alloc::boxed::FnBox<A>>::call_box
  10: __rust_maybe_catch_panic
             at libpanic_unwind/lib.rs:103


failures:
    common::clean_zone::t::clean_zone_leak

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 99 filtered out

error: test failed, to rerun pass '--test mod'

[reproduce]
env RUST_BACKTRACE=1 cargo +nightly-2018-09-06-x86_64-unknown-freebsd test
--all-features -- --ignored common::clean_zone::t::clean_zone_leak

[comments]
# Comments and updates - leave your name
