/* automatically generated by rust-bindgen */

pub const ISAL_MAJOR_VERSION: ::std::os::raw::c_uint = 2;
pub const ISAL_MINOR_VERSION: ::std::os::raw::c_uint = 19;
pub const ISAL_PATCH_VERSION: ::std::os::raw::c_uint = 0;
extern "C" {
    /// @brief Initialize tables for fast Erasure Code encode and decode.
///
/// Generates the expanded tables needed for fast encode or decode for erasure
/// codes on blocks of data.  32bytes is generated for each input coefficient.
///
/// @param k      The number of vector sources or rows in the generator matrix
/// for coding.
/// @param rows   The number of output vectors to concurrently encode/decode.
/// @param a      Pointer to sets of arrays of input coefficients used to encode
/// or decode data.
/// @param gftbls Pointer to start of space for concatenated output tables
/// generated from input coefficients.  Must be of size 32*k*rows.
/// @returns none
    pub fn ec_init_tables(k: ::std::os::raw::c_int,
                          rows: ::std::os::raw::c_int,
                          a: *mut ::std::os::raw::c_uchar,
                          gftbls: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    /// @brief Generate or decode erasure codes on blocks of data, runs appropriate version.
///
/// Given a list of source data blocks, generate one or multiple blocks of
/// encoded data as specified by a matrix of GF(2^8) coefficients. When given a
/// suitable set of coefficients, this function will perform the fast generation
/// or decoding of Reed-Solomon type erasure codes.
///
/// This function determines what instruction sets are enabled and
/// selects the appropriate version at runtime.
///
/// @param len    Length of each block of data (vector) of source or dest data.
/// @param k      The number of vector sources or rows in the generator matrix
/// for coding.
/// @param rows   The number of output vectors to concurrently encode/decode.
/// @param gftbls Pointer to array of input tables generated from coding
/// coefficients in ec_init_tables(). Must be of size 32*k*rows
/// @param data   Array of pointers to source input buffers.
/// @param coding Array of pointers to coded output buffers.
/// @returns none
    pub fn ec_encode_data(len: ::std::os::raw::c_int,
                          k: ::std::os::raw::c_int,
                          rows: ::std::os::raw::c_int,
                          gftbls: *mut ::std::os::raw::c_uchar,
                          data: *mut *mut ::std::os::raw::c_uchar,
                          coding: *mut *mut ::std::os::raw::c_uchar);
}
extern "C" {
    /// @brief Generate update for encode or decode of erasure codes from single source, runs appropriate version.
///
/// Given one source data block, update one or multiple blocks of encoded data as
/// specified by a matrix of GF(2^8) coefficients. When given a suitable set of
/// coefficients, this function will perform the fast generation or decoding of
/// Reed-Solomon type erasure codes from one input source at a time.
///
/// This function determines what instruction sets are enabled and selects the
/// appropriate version at runtime.
///
/// @param len    Length of each block of data (vector) of source or dest data.
/// @param k      The number of vector sources or rows in the generator matrix
/// for coding.
/// @param rows   The number of output vectors to concurrently encode/decode.
/// @param vec_i  The vector index corresponding to the single input source.
/// @param g_tbls Pointer to array of input tables generated from coding
/// coefficients in ec_init_tables(). Must be of size 32*k*rows
/// @param data   Pointer to single input source used to update output parity.
/// @param coding Array of pointers to coded output buffers.
/// @returns none
    pub fn ec_encode_data_update(len: ::std::os::raw::c_int,
                                 k: ::std::os::raw::c_int,
                                 rows: ::std::os::raw::c_int,
                                 vec_i: ::std::os::raw::c_int,
                                 g_tbls: *mut ::std::os::raw::c_uchar,
                                 data: *mut ::std::os::raw::c_uchar,
                                 coding: *mut *mut ::std::os::raw::c_uchar);
}
extern "C" {
    /// @brief Generate a matrix of coefficients to be used for encoding.
///
/// Vandermonde matrix example of encoding coefficients where high portion of
/// matrix is identity matrix I and lower portion is constructed as 2^{i*(j-k+1)}
/// i:{0,k-1} j:{k,m-1}. Commonly used method for choosing coefficients in
/// erasure encoding but does not guarantee invertable for every sub matrix. For
/// large pairs of m and k it is possible to find cases where the decode matrix
/// chosen from sources and parity is not invertable. Users may want to adjust
/// for certain pairs m and k. If m and k satisfy one of the following
/// inequalities, no adjustment is required:
///
/// k <= 3
/// k = 4, m <= 25
/// k = 5, m <= 10
/// k <= 21, m-k = 4
/// m - k <= 3.
///
/// @param a  [mxk] array to hold coefficients
/// @param m  number of rows in matrix corresponding to srcs + parity.
/// @param k  number of columns in matrix corresponding to srcs.
/// @returns  none
    pub fn gf_gen_rs_matrix(a: *mut ::std::os::raw::c_uchar,
                            m: ::std::os::raw::c_int,
                            k: ::std::os::raw::c_int);
}
extern "C" {
    /// @brief Generate a Cauchy matrix of coefficients to be used for encoding.
///
/// Cauchy matrix example of encoding coefficients where high portion of matrix
/// is identity matrix I and lower portion is constructed as 1/(i + j) | i != j,
/// i:{0,k-1} j:{k,m-1}.  Any sub-matrix of a Cauchy matrix should be invertable.
///
/// @param a  [mxk] array to hold coefficients
/// @param m  number of rows in matrix corresponding to srcs + parity.
/// @param k  number of columns in matrix corresponding to srcs.
/// @returns  none
    pub fn gf_gen_cauchy1_matrix(a: *mut ::std::os::raw::c_uchar,
                                 m: ::std::os::raw::c_int,
                                 k: ::std::os::raw::c_int);
}
extern "C" {
    /// @brief Invert a matrix in GF(2^8)
///
/// @param in  input matrix
/// @param out output matrix such that [in] x [out] = [I] - identity matrix
/// @param n   size of matrix [nxn]
/// @returns 0 successful, other fail on singular input matrix
    pub fn gf_invert_matrix(in_: *mut ::std::os::raw::c_uchar,
                            out: *mut ::std::os::raw::c_uchar,
                            n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
