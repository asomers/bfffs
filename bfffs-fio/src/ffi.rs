#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(unused)]
#![cfg_attr(test, allow(deref_nullptr))]
#![allow(clippy::all)]
use libc::timespec;
/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }

    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }

    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }

    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }

    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const FIO_IOOPS_VERSION: u32 = 32;
pub type __int32_t = libc::c_int;
pub type __int64_t = libc::c_long;
pub type __time_t = __int64_t;
pub type __pid_t = __int32_t;
pub type pthread_t = u64;
pub type pthread_mutex_t = u64;
pub type pthread_cond_t = u64;
pub type pid_t = __pid_t;
pub type time_t = __time_t;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub _bindgen_opaque_blob: [u64; 18usize],
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
}
pub type FILE = [u64; 39usize];
pub const fio_ddir_DDIR_READ: fio_ddir = 0;
pub const fio_ddir_DDIR_WRITE: fio_ddir = 1;
pub const fio_ddir_DDIR_TRIM: fio_ddir = 2;
pub const fio_ddir_DDIR_SYNC: fio_ddir = 3;
pub const fio_ddir_DDIR_DATASYNC: fio_ddir = 4;
pub const fio_ddir_DDIR_SYNC_FILE_RANGE: fio_ddir = 5;
pub const fio_ddir_DDIR_WAIT: fio_ddir = 6;
pub const fio_ddir_DDIR_LAST: fio_ddir = 7;
pub const fio_ddir_DDIR_INVAL: fio_ddir = -1;
pub const fio_ddir_DDIR_RWDIR_CNT: fio_ddir = 3;
pub const fio_ddir_DDIR_RWDIR_SYNC_CNT: fio_ddir = 4;
pub type fio_ddir = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flist_head {
    pub next: *mut flist_head,
    pub prev: *mut flist_head,
}
#[test]
fn bindgen_test_layout_flist_head() {
    const UNINIT: ::std::mem::MaybeUninit<flist_head> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flist_head>(),
        16usize,
        concat!("Size of: ", stringify!(flist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<flist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(flist_head))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flist_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flist_head),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taus88_state {
    pub s1: libc::c_uint,
    pub s2: libc::c_uint,
    pub s3: libc::c_uint,
}
#[test]
fn bindgen_test_layout_taus88_state() {
    const UNINIT: ::std::mem::MaybeUninit<taus88_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<taus88_state>(),
        12usize,
        concat!("Size of: ", stringify!(taus88_state))
    );
    assert_eq!(
        ::std::mem::align_of::<taus88_state>(),
        4usize,
        concat!("Alignment of ", stringify!(taus88_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taus88_state),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(taus88_state),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taus88_state),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taus258_state {
    pub s1: u64,
    pub s2: u64,
    pub s3: u64,
    pub s4: u64,
    pub s5: u64,
}
#[test]
fn bindgen_test_layout_taus258_state() {
    const UNINIT: ::std::mem::MaybeUninit<taus258_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<taus258_state>(),
        40usize,
        concat!("Size of: ", stringify!(taus258_state))
    );
    assert_eq!(
        ::std::mem::align_of::<taus258_state>(),
        8usize,
        concat!("Alignment of ", stringify!(taus258_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s5)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct frand_state {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union frand_state__bindgen_ty_1 {
    pub state32: taus88_state,
    pub state64: taus258_state,
}
#[test]
fn bindgen_test_layout_frand_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<frand_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<frand_state__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(frand_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<frand_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(frand_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frand_state__bindgen_ty_1),
            "::",
            stringify!(state32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frand_state__bindgen_ty_1),
            "::",
            stringify!(state64)
        )
    );
}
#[test]
fn bindgen_test_layout_frand_state() {
    assert_eq!(
        ::std::mem::size_of::<frand_state>(),
        48usize,
        concat!("Size of: ", stringify!(frand_state))
    );
    assert_eq!(
        ::std::mem::align_of::<frand_state>(),
        8usize,
        concat!("Alignment of ", stringify!(frand_state))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct zipf_state {
    pub _bindgen_opaque_blob: [u64; 13usize],
}
#[test]
fn bindgen_test_layout_zipf_state() {
    assert_eq!(
        ::std::mem::size_of::<zipf_state>(),
        104usize,
        concat!("Size of: ", stringify!(zipf_state))
    );
    assert_eq!(
        ::std::mem::align_of::<zipf_state>(),
        8usize,
        concat!("Alignment of ", stringify!(zipf_state))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct axmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fio_lfsr {
    pub _bindgen_opaque_blob: [u64; 8usize],
}
#[test]
fn bindgen_test_layout_fio_lfsr() {
    assert_eq!(
        ::std::mem::size_of::<fio_lfsr>(),
        64usize,
        concat!("Size of: ", stringify!(fio_lfsr))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_lfsr>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_lfsr))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct gauss_state {
    pub _bindgen_opaque_blob: [u64; 9usize],
}
#[test]
fn bindgen_test_layout_gauss_state() {
    assert_eq!(
        ::std::mem::size_of::<gauss_state>(),
        72usize,
        concat!("Size of: ", stringify!(gauss_state))
    );
    assert_eq!(
        ::std::mem::align_of::<gauss_state>(),
        8usize,
        concat!("Alignment of ", stringify!(gauss_state))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zoned_block_device_info {
    _unused: [u8; 0],
}
pub const fio_filetype_FIO_TYPE_FILE: fio_filetype = 1;
pub const fio_filetype_FIO_TYPE_BLOCK: fio_filetype = 2;
pub const fio_filetype_FIO_TYPE_CHAR: fio_filetype = 3;
pub const fio_filetype_FIO_TYPE_PIPE: fio_filetype = 4;
pub type fio_filetype = libc::c_uint;
pub const fio_file_flags_FIO_FILE_open: fio_file_flags = 1;
pub const fio_file_flags_FIO_FILE_closing: fio_file_flags = 2;
pub const fio_file_flags_FIO_FILE_extend: fio_file_flags = 4;
pub const fio_file_flags_FIO_FILE_done: fio_file_flags = 8;
pub const fio_file_flags_FIO_FILE_size_known: fio_file_flags = 16;
pub const fio_file_flags_FIO_FILE_hashed: fio_file_flags = 32;
pub const fio_file_flags_FIO_FILE_partial_mmap: fio_file_flags = 64;
pub const fio_file_flags_FIO_FILE_axmap: fio_file_flags = 128;
pub const fio_file_flags_FIO_FILE_lfsr: fio_file_flags = 256;
pub const fio_file_flags_FIO_FILE_smalloc: fio_file_flags = 512;
pub type fio_file_flags = libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fio_file {
    pub hash_list:        flist_head,
    pub filetype:         fio_filetype,
    pub fd:               libc::c_int,
    pub shadow_fd:        libc::c_int,
    pub major:            libc::c_uint,
    pub minor:            libc::c_uint,
    pub fileno:           libc::c_int,
    pub file_name:        *mut libc::c_char,
    pub real_file_size:   u64,
    pub file_offset:      u64,
    pub io_size:          u64,
    pub ruhs_info:        *mut fio_ruhs_info,
    pub zbd_info:         *mut zoned_block_device_info,
    pub min_zone:         u32,
    pub max_zone:         u32,
    pub last_pos:         [u64; 3usize],
    pub last_start:       [u64; 3usize],
    pub first_write:      u64,
    pub last_write:       u64,
    pub last_write_comp:  *mut u64,
    pub last_write_idx:   libc::c_uint,
    pub engine_pos:       u64,
    pub engine_data:      *mut libc::c_void,
    pub __bindgen_anon_1: fio_file__bindgen_ty_1,
    pub __bindgen_anon_2: fio_file__bindgen_ty_2,
    pub __bindgen_anon_3: fio_file__bindgen_ty_3,
    pub references:       libc::c_int,
    pub flags:            fio_file_flags,
    pub du:               *mut disk_util,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_1 {
    pub lock:   *mut fio_sem,
    pub rwlock: *mut fio_rwlock,
}
#[test]
fn bindgen_test_layout_fio_file__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<fio_file__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fio_file__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(fio_file__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_1),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rwlock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_1),
            "::",
            stringify!(rwlock)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_2 {
    pub io_axmap: *mut axmap,
    pub lfsr:     fio_lfsr,
}
#[test]
fn bindgen_test_layout_fio_file__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<fio_file__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fio_file__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(fio_file__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_axmap) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_2),
            "::",
            stringify!(io_axmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lfsr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_2),
            "::",
            stringify!(lfsr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_3 {
    pub zipf:  zipf_state,
    pub gauss: gauss_state,
}
#[test]
fn bindgen_test_layout_fio_file__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<fio_file__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fio_file__bindgen_ty_3>(),
        104usize,
        concat!("Size of: ", stringify!(fio_file__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zipf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_3),
            "::",
            stringify!(zipf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gauss) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_3),
            "::",
            stringify!(gauss)
        )
    );
}
#[test]
fn bindgen_test_layout_fio_file() {
    const UNINIT: ::std::mem::MaybeUninit<fio_file> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fio_file>(),
        384usize,
        concat!("Size of: ", stringify!(fio_file))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hash_list) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(hash_list)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filetype) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(filetype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadow_fd) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(shadow_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileno) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_name) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).real_file_size) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(real_file_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_offset) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(file_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(io_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ruhs_info) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(ruhs_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zbd_info) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(zbd_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_zone) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(min_zone)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_zone) as usize - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(max_zone)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_pos) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_pos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_start) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_start)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).first_write) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(first_write)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_write) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_write)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_write_comp) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_write_comp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_write_idx) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_write_idx)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).engine_pos) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(engine_pos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).engine_data) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(engine_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).references) as usize - ptr as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).du) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(du)
        )
    );
}
pub type os_aiocb_t = [u64; 20usize];
pub const fio_opt_type_FIO_OPT_INVALID: fio_opt_type = 0;
pub const fio_opt_type_FIO_OPT_STR: fio_opt_type = 1;
pub const fio_opt_type_FIO_OPT_STR_ULL: fio_opt_type = 2;
pub const fio_opt_type_FIO_OPT_STR_MULTI: fio_opt_type = 3;
pub const fio_opt_type_FIO_OPT_STR_VAL: fio_opt_type = 4;
pub const fio_opt_type_FIO_OPT_STR_VAL_TIME: fio_opt_type = 5;
pub const fio_opt_type_FIO_OPT_STR_STORE: fio_opt_type = 6;
pub const fio_opt_type_FIO_OPT_RANGE: fio_opt_type = 7;
pub const fio_opt_type_FIO_OPT_INT: fio_opt_type = 8;
pub const fio_opt_type_FIO_OPT_ULL: fio_opt_type = 9;
pub const fio_opt_type_FIO_OPT_BOOL: fio_opt_type = 10;
pub const fio_opt_type_FIO_OPT_FLOAT_LIST: fio_opt_type = 11;
pub const fio_opt_type_FIO_OPT_STR_SET: fio_opt_type = 12;
pub const fio_opt_type_FIO_OPT_STR_VAL_ZONE: fio_opt_type = 13;
pub const fio_opt_type_FIO_OPT_DEPRECATED: fio_opt_type = 14;
pub const fio_opt_type_FIO_OPT_SOFT_DEPRECATED: fio_opt_type = 15;
pub const fio_opt_type_FIO_OPT_UNSUPPORTED: fio_opt_type = 16;
pub type fio_opt_type = libc::c_uint;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct value_pair {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_value_pair() {
    assert_eq!(
        ::std::mem::size_of::<value_pair>(),
        40usize,
        concat!("Size of: ", stringify!(value_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<value_pair>(),
        8usize,
        concat!("Alignment of ", stringify!(value_pair))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_option {
    pub name:        *const libc::c_char,
    pub lname:       *const libc::c_char,
    pub alias:       *const libc::c_char,
    pub type_:       fio_opt_type,
    pub off1:        libc::c_uint,
    pub off2:        libc::c_uint,
    pub off3:        libc::c_uint,
    pub off4:        libc::c_uint,
    pub off5:        libc::c_uint,
    pub off6:        libc::c_uint,
    pub maxval:      libc::c_ulonglong,
    pub minval:      libc::c_int,
    pub maxfp:       f64,
    pub minfp:       f64,
    pub interval:    libc::c_uint,
    pub maxlen:      libc::c_uint,
    pub neg:         libc::c_int,
    pub prio:        libc::c_int,
    pub cb:          *mut libc::c_void,
    pub help:        *const libc::c_char,
    pub def:         *const libc::c_char,
    pub posval:      [value_pair; 32usize],
    pub parent:      *const libc::c_char,
    pub hide:        libc::c_int,
    pub hide_on_set: libc::c_int,
    pub inverse:     *const libc::c_char,
    pub inv_opt:     *mut fio_option,
    pub verify: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const fio_option,
            arg2: *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub prof_name:   *const libc::c_char,
    pub prof_opts:   *mut libc::c_void,
    pub category:    u64,
    pub group:       u64,
    pub gui_data:    *mut libc::c_void,
    pub is_seconds:  libc::c_int,
    pub is_time:     libc::c_int,
    pub no_warn_def: libc::c_int,
    pub pow2:        libc::c_int,
    pub no_free:     libc::c_int,
}
#[test]
fn bindgen_test_layout_fio_option() {
    const UNINIT: ::std::mem::MaybeUninit<fio_option> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fio_option>(),
        1512usize,
        concat!("Size of: ", stringify!(fio_option))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_option>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_option))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(lname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off4) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off5) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxval) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(maxval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minval) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(minval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxfp) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(maxfp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minfp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(minfp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxlen) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).neg) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prio) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).help) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).posval) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(posval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hide) as usize - ptr as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(hide)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hide_on_set) as usize - ptr as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(hide_on_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inverse) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(inverse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inv_opt) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(inv_opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verify) as usize - ptr as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prof_name) as usize - ptr as usize
        },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(prof_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prof_opts) as usize - ptr as usize
        },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(prof_opts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).category) as usize - ptr as usize
        },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gui_data) as usize - ptr as usize
        },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(gui_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).is_seconds) as usize - ptr as usize
        },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(is_seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_time) as usize - ptr as usize },
        1492usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(is_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).no_warn_def) as usize - ptr as usize
        },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(no_warn_def)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pow2) as usize - ptr as usize },
        1500usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(pow2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_free) as usize - ptr as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(no_free)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fio_rb_node {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_fio_rb_node() {
    assert_eq!(
        ::std::mem::size_of::<fio_rb_node>(),
        24usize,
        concat!("Size of: ", stringify!(fio_rb_node))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_rb_node>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_rb_node))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_rb_root() {
    assert_eq!(
        ::std::mem::size_of::<rb_root>(),
        8usize,
        concat!("Size of: ", stringify!(rb_root))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_root>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_root))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct workqueue_work {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_workqueue_work() {
    assert_eq!(
        ::std::mem::size_of::<workqueue_work>(),
        16usize,
        concat!("Size of: ", stringify!(workqueue_work))
    );
    assert_eq!(
        ::std::mem::align_of::<workqueue_work>(),
        8usize,
        concat!("Alignment of ", stringify!(workqueue_work))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct workqueue {
    pub _bindgen_opaque_blob: [u64; 18usize],
}
#[test]
fn bindgen_test_layout_workqueue() {
    assert_eq!(
        ::std::mem::size_of::<workqueue>(),
        144usize,
        concat!("Size of: ", stringify!(workqueue))
    );
    assert_eq!(
        ::std::mem::align_of::<workqueue>(),
        8usize,
        concat!("Alignment of ", stringify!(workqueue))
    );
}
#[repr(C)]
pub struct io_u {
    pub start_time:       timespec,
    pub issue_time:       timespec,
    pub file:             *mut fio_file,
    pub flags:            libc::c_uint,
    pub ddir:             fio_ddir,
    pub acct_ddir:        fio_ddir,
    pub numberio:         libc::c_ushort,
    pub ioprio:           libc::c_ushort,
    pub clat_prio_index:  libc::c_ushort,
    pub buflen:           libc::c_ulonglong,
    pub offset:           libc::c_ulonglong,
    pub verify_offset:    libc::c_ulonglong,
    pub buf:              *mut libc::c_void,
    pub rand_seed:        u64,
    pub xfer_buf:         *mut libc::c_void,
    pub xfer_buflen:      libc::c_ulonglong,
    pub buf_filled_len:   libc::c_ulonglong,
    pub ipo:              *mut io_piece,
    pub resid:            libc::c_ulonglong,
    pub error:            libc::c_uint,
    pub __bindgen_anon_1: io_u__bindgen_ty_1,
    pub __bindgen_anon_2: io_u__bindgen_ty_2,
    pub zbd_queue_io: ::std::option::Option<
        unsafe extern "C" fn(
            td: *mut thread_data,
            arg1: *mut io_u,
            q: libc::c_int,
            success: bool,
        ),
    >,
    pub zbd_put_io: ::std::option::Option<
        unsafe extern "C" fn(td: *mut thread_data, arg1: *const io_u),
    >,
    pub end_io: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut *mut io_u,
        ) -> libc::c_int,
    >,
    pub dtype:            u32,
    pub dspec:            u32,
    pub __bindgen_anon_3: io_u__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_1 {
    pub index:       libc::c_uint,
    pub seen:        libc::c_uint,
    pub engine_data: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_io_u__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_u__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_u__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io_u__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_1),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_1),
            "::",
            stringify!(seen)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).engine_data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_1),
            "::",
            stringify!(engine_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_2 {
    pub verify_list: flist_head,
    pub work:        workqueue_work,
}
#[test]
fn bindgen_test_layout_io_u__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<io_u__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_u__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(io_u__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_list) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_2),
            "::",
            stringify!(verify_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_2),
            "::",
            stringify!(work)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_3 {
    pub aiocb:     os_aiocb_t,
    pub mr:        *mut ibv_mr,
    pub mmap_data: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_io_u__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<io_u__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_u__bindgen_ty_3>(),
        160usize,
        concat!("Size of: ", stringify!(io_u__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aiocb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_3),
            "::",
            stringify!(aiocb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_3),
            "::",
            stringify!(mr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mmap_data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_3),
            "::",
            stringify!(mmap_data)
        )
    );
}
#[test]
fn bindgen_test_layout_io_u() {
    const UNINIT: ::std::mem::MaybeUninit<io_u> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_u>(),
        368usize,
        concat!("Size of: ", stringify!(io_u))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).issue_time) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(issue_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ddir) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(ddir)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).acct_ddir) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(acct_ddir)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).numberio) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(numberio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioprio) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(ioprio)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clat_prio_index) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(clat_prio_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buflen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_offset) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(verify_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(io_u), "::", stringify!(buf))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rand_seed) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(rand_seed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).xfer_buf) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(xfer_buf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).xfer_buflen) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(xfer_buflen)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_filled_len) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(buf_filled_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipo) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(io_u), "::", stringify!(ipo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resid) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(resid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zbd_queue_io) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(zbd_queue_io)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zbd_put_io) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(zbd_put_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_io) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(end_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtype) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(dtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dspec) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(dspec)
        )
    );
}
pub const zbd_zoned_model_ZBD_NONE: zbd_zoned_model = 1;
pub const zbd_zoned_model_ZBD_HOST_AWARE: zbd_zoned_model = 2;
pub const zbd_zoned_model_ZBD_HOST_MANAGED: zbd_zoned_model = 3;
pub type zbd_zoned_model = libc::c_uint;
pub const zbd_zone_type_ZBD_ZONE_TYPE_CNV: zbd_zone_type = 1;
pub const zbd_zone_type_ZBD_ZONE_TYPE_SWR: zbd_zone_type = 2;
pub const zbd_zone_type_ZBD_ZONE_TYPE_SWP: zbd_zone_type = 3;
pub type zbd_zone_type = libc::c_uint;
pub const zbd_zone_cond_ZBD_ZONE_COND_NOT_WP: zbd_zone_cond = 0;
pub const zbd_zone_cond_ZBD_ZONE_COND_EMPTY: zbd_zone_cond = 1;
pub const zbd_zone_cond_ZBD_ZONE_COND_IMP_OPEN: zbd_zone_cond = 2;
pub const zbd_zone_cond_ZBD_ZONE_COND_EXP_OPEN: zbd_zone_cond = 3;
pub const zbd_zone_cond_ZBD_ZONE_COND_CLOSED: zbd_zone_cond = 4;
pub const zbd_zone_cond_ZBD_ZONE_COND_READONLY: zbd_zone_cond = 13;
pub const zbd_zone_cond_ZBD_ZONE_COND_FULL: zbd_zone_cond = 14;
pub const zbd_zone_cond_ZBD_ZONE_COND_OFFLINE: zbd_zone_cond = 15;
pub type zbd_zone_cond = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbd_zone {
    pub start:    u64,
    pub wp:       u64,
    pub len:      u64,
    pub capacity: u64,
    pub type_:    zbd_zone_type,
    pub cond:     zbd_zone_cond,
}
#[test]
fn bindgen_test_layout_zbd_zone() {
    const UNINIT: ::std::mem::MaybeUninit<zbd_zone> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zbd_zone>(),
        40usize,
        concat!("Size of: ", stringify!(zbd_zone))
    );
    assert_eq!(
        ::std::mem::align_of::<zbd_zone>(),
        8usize,
        concat!("Alignment of ", stringify!(zbd_zone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(cond)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct fio_ruhs_info {
    pub nr_ruhs: u32,
    pub pli_loc: u32,
    pub plis:    __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_fio_ruhs_info() {
    const UNINIT: ::std::mem::MaybeUninit<fio_ruhs_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fio_ruhs_info>(),
        8usize,
        concat!("Size of: ", stringify!(fio_ruhs_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_ruhs_info>(),
        4usize,
        concat!("Alignment of ", stringify!(fio_ruhs_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_ruhs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_ruhs_info),
            "::",
            stringify!(nr_ruhs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pli_loc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_ruhs_info),
            "::",
            stringify!(pli_loc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plis) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_ruhs_info),
            "::",
            stringify!(plis)
        )
    );
}
pub const fio_q_status_FIO_Q_COMPLETED: fio_q_status = 0;
pub const fio_q_status_FIO_Q_QUEUED: fio_q_status = 1;
pub const fio_q_status_FIO_Q_BUSY: fio_q_status = 2;
pub type fio_q_status = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ioengine_ops {
    pub list:               flist_head,
    pub name:               *const libc::c_char,
    pub version:            libc::c_int,
    pub flags:              libc::c_int,
    pub dlhandle:           *mut libc::c_void,
    pub setup: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub post_init: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub prep: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> libc::c_int,
    >,
    pub queue: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> fio_q_status,
    >,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub getevents: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: libc::c_uint,
            arg3: libc::c_uint,
            arg4: *const timespec,
        ) -> libc::c_int,
    >,
    pub event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: libc::c_int,
        ) -> *mut io_u,
    >,
    pub errdetails: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut io_u) -> *mut libc::c_char,
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> libc::c_int,
    >,
    pub cleanup:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub open_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub close_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub unlink_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub get_file_size: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub prepopulate_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub terminate:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub iomem_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: usize,
        ) -> libc::c_int,
    >,
    pub iomem_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub io_u_init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> libc::c_int,
    >,
    pub io_u_free: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut io_u),
    >,
    pub get_zoned_model: ::std::option::Option<
        unsafe extern "C" fn(
            td: *mut thread_data,
            f: *mut fio_file,
            arg1: *mut zbd_zoned_model,
        ) -> libc::c_int,
    >,
    pub report_zones: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: u64,
            arg4: *mut zbd_zone,
            arg5: libc::c_uint,
        ) -> libc::c_int,
    >,
    pub reset_wp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: u64,
            arg4: u64,
        ) -> libc::c_int,
    >,
    pub get_max_open_zones: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: *mut libc::c_uint,
        ) -> libc::c_int,
    >,
    pub finish_zone: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: u64,
            arg4: u64,
        ) -> libc::c_int,
    >,
    pub fdp_fetch_ruhs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: *mut fio_ruhs_info,
        ) -> libc::c_int,
    >,
    pub option_struct_size: libc::c_int,
    pub options:            *mut fio_option,
}
#[test]
fn bindgen_test_layout_ioengine_ops() {
    const UNINIT: ::std::mem::MaybeUninit<ioengine_ops> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ioengine_ops>(),
        280usize,
        concat!("Size of: ", stringify!(ioengine_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<ioengine_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(ioengine_ops))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dlhandle) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(dlhandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setup) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).post_init) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(post_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prep) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(prep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(commit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).getevents) as usize - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(getevents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).errdetails) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(errdetails)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).open_file) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(open_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).close_file) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(close_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).invalidate) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).unlink_file) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(unlink_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_file_size) as usize - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(get_file_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prepopulate_file) as usize -
                ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(prepopulate_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).terminate) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(terminate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iomem_alloc) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(iomem_alloc)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iomem_free) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(iomem_free)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_init) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(io_u_init)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_free) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(io_u_free)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_zoned_model) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(get_zoned_model)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).report_zones) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(report_zones)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).reset_wp) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(reset_wp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).get_max_open_zones) as usize -
                ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(get_max_open_zones)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).finish_zone) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(finish_zone)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fdp_fetch_ruhs) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(fdp_fetch_ruhs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).option_struct_size) as usize -
                ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(option_struct_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(options)
        )
    );
}
pub const fio_ioengine_flags_FIO_SYNCIO: fio_ioengine_flags = 1;
pub const fio_ioengine_flags_FIO_RAWIO: fio_ioengine_flags = 2;
pub const fio_ioengine_flags_FIO_DISKLESSIO: fio_ioengine_flags = 4;
pub const fio_ioengine_flags_FIO_NOEXTEND: fio_ioengine_flags = 8;
pub const fio_ioengine_flags_FIO_NODISKUTIL: fio_ioengine_flags = 16;
pub const fio_ioengine_flags_FIO_UNIDIR: fio_ioengine_flags = 32;
pub const fio_ioengine_flags_FIO_NOIO: fio_ioengine_flags = 64;
pub const fio_ioengine_flags_FIO_PIPEIO: fio_ioengine_flags = 128;
pub const fio_ioengine_flags_FIO_BARRIER: fio_ioengine_flags = 256;
pub const fio_ioengine_flags_FIO_MEMALIGN: fio_ioengine_flags = 512;
pub const fio_ioengine_flags_FIO_BIT_BASED: fio_ioengine_flags = 1024;
pub const fio_ioengine_flags_FIO_FAKEIO: fio_ioengine_flags = 2048;
pub const fio_ioengine_flags_FIO_NOSTATS: fio_ioengine_flags = 4096;
pub const fio_ioengine_flags_FIO_NOFILEHASH: fio_ioengine_flags = 8192;
pub const fio_ioengine_flags_FIO_ASYNCIO_SYNC_TRIM: fio_ioengine_flags = 16384;
pub const fio_ioengine_flags_FIO_NO_OFFLOAD: fio_ioengine_flags = 32768;
pub const fio_ioengine_flags_FIO_ASYNCIO_SETS_ISSUE_TIME: fio_ioengine_flags =
    65536;
pub const fio_ioengine_flags_FIO_SKIPPABLE_IOMEM_ALLOC: fio_ioengine_flags =
    131072;
pub const fio_ioengine_flags_FIO_RO_NEEDS_RW_OPEN: fio_ioengine_flags = 262144;
pub type fio_ioengine_flags = libc::c_uint;
#[repr(C)]
#[repr(align(8))]
pub struct io_log {
    pub _bindgen_opaque_blob: [u64; 63usize],
}
#[test]
fn bindgen_test_layout_io_log() {
    assert_eq!(
        ::std::mem::size_of::<io_log>(),
        504usize,
        concat!("Size of: ", stringify!(io_log))
    );
    assert_eq!(
        ::std::mem::align_of::<io_log>(),
        8usize,
        concat!("Alignment of ", stringify!(io_log))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct io_piece {
    pub _bindgen_opaque_blob: [u64; 12usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_1 {
    pub rb_node: fio_rb_node,
    pub list:    flist_head,
}
#[test]
fn bindgen_test_layout_io_piece__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<io_piece__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_piece__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(io_piece__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_piece__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_piece__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb_node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_1),
            "::",
            stringify!(rb_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_1),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_2 {
    pub fileno: libc::c_int,
    pub file:   *mut fio_file,
}
#[test]
fn bindgen_test_layout_io_piece__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<io_piece__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_piece__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(io_piece__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<io_piece__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_piece__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_2),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_2),
            "::",
            stringify!(file)
        )
    );
}
#[test]
fn bindgen_test_layout_io_piece() {
    assert_eq!(
        ::std::mem::size_of::<io_piece>(),
        96usize,
        concat!("Size of: ", stringify!(io_piece))
    );
    assert_eq!(
        ::std::mem::align_of::<io_piece>(),
        8usize,
        concat!("Alignment of ", stringify!(io_piece))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fio_sem {
    pub _bindgen_opaque_blob: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_fio_sem() {
    assert_eq!(
        ::std::mem::size_of::<fio_sem>(),
        32usize,
        concat!("Size of: ", stringify!(fio_sem))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_sem>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_sem))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct disk_util {
    pub _bindgen_opaque_blob: [u64; 191usize],
}
#[test]
fn bindgen_test_layout_disk_util() {
    assert_eq!(
        ::std::mem::size_of::<disk_util>(),
        1528usize,
        concat!("Size of: ", stringify!(disk_util))
    );
    assert_eq!(
        ::std::mem::align_of::<disk_util>(),
        8usize,
        concat!("Alignment of ", stringify!(disk_util))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct clat_prio_stat {
    pub _bindgen_opaque_blob: [u64; 1864usize],
}
#[test]
fn bindgen_test_layout_clat_prio_stat() {
    assert_eq!(
        ::std::mem::size_of::<clat_prio_stat>(),
        14912usize,
        concat!("Size of: ", stringify!(clat_prio_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<clat_prio_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(clat_prio_stat))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct thread_stat {
    pub _bindgen_opaque_blob: [u64; 22986usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_1 {
    pub continue_on_error: u16,
    pub pad2:              u32,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<thread_stat__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).continue_on_error) as usize -
                ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_1),
            "::",
            stringify!(continue_on_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_1),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_2 {
    pub ss_iops_data:        *mut u64,
    pub ss_iops_data_offset: u64,
    pub pad4:                u64,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<thread_stat__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ss_iops_data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_2),
            "::",
            stringify!(ss_iops_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ss_iops_data_offset) as usize -
                ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_2),
            "::",
            stringify!(ss_iops_data_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_2),
            "::",
            stringify!(pad4)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_3 {
    pub ss_bw_data:        *mut u64,
    pub ss_bw_data_offset: u64,
    pub pad5:              u64,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<thread_stat__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ss_bw_data) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_3),
            "::",
            stringify!(ss_bw_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ss_bw_data_offset) as usize -
                ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_3),
            "::",
            stringify!(ss_bw_data_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad5) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_3),
            "::",
            stringify!(pad5)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_4 {
    pub clat_prio:        [*mut clat_prio_stat; 3usize],
    pub clat_prio_offset: [u64; 3usize],
    pub pad6:             u64,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<thread_stat__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clat_prio) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_4),
            "::",
            stringify!(clat_prio)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clat_prio_offset) as usize -
                ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_4),
            "::",
            stringify!(clat_prio_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_4),
            "::",
            stringify!(pad6)
        )
    );
}
#[test]
fn bindgen_test_layout_thread_stat() {
    assert_eq!(
        ::std::mem::size_of::<thread_stat>(),
        183888usize,
        concat!("Size of: ", stringify!(thread_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct thread_options {
    pub _bindgen_opaque_blob: [u64; 407usize],
}
#[test]
fn bindgen_test_layout_thread_options() {
    assert_eq!(
        ::std::mem::size_of::<thread_options>(),
        3256usize,
        concat!("Size of: ", stringify!(thread_options))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_options>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_options))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct prof_io_ops {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_prof_io_ops() {
    assert_eq!(
        ::std::mem::size_of::<prof_io_ops>(),
        24usize,
        concat!("Size of: ", stringify!(prof_io_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<prof_io_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(prof_io_ops))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct io_u_queue {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_io_u_queue() {
    assert_eq!(
        ::std::mem::size_of::<io_u_queue>(),
        16usize,
        concat!("Size of: ", stringify!(io_u_queue))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u_queue>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u_queue))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct io_u_ring {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_io_u_ring() {
    assert_eq!(
        ::std::mem::size_of::<io_u_ring>(),
        24usize,
        concat!("Size of: ", stringify!(io_u_ring))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u_ring))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct steadystate_data {
    pub _bindgen_opaque_blob: [u64; 19usize],
}
#[test]
fn bindgen_test_layout_steadystate_data() {
    assert_eq!(
        ::std::mem::size_of::<steadystate_data>(),
        152usize,
        concat!("Size of: ", stringify!(steadystate_data))
    );
    assert_eq!(
        ::std::mem::align_of::<steadystate_data>(),
        8usize,
        concat!("Alignment of ", stringify!(steadystate_data))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct zone_split_index {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_zone_split_index() {
    assert_eq!(
        ::std::mem::size_of::<zone_split_index>(),
        24usize,
        concat!("Size of: ", stringify!(zone_split_index))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_split_index>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_split_index))
    );
}
#[repr(C)]
pub struct thread_data {
    pub opt_list: flist_head,
    pub flags: libc::c_ulonglong,
    pub o: thread_options,
    pub eo: *mut libc::c_void,
    pub thread: pthread_t,
    pub thread_number: libc::c_uint,
    pub subjob_number: libc::c_uint,
    pub groupid: libc::c_uint,
    pub ts: thread_stat,
    pub client_type: libc::c_int,
    pub slat_log: *mut io_log,
    pub clat_log: *mut io_log,
    pub clat_hist_log: *mut io_log,
    pub lat_log: *mut io_log,
    pub bw_log: *mut io_log,
    pub iops_log: *mut io_log,
    pub log_compress_wq: workqueue,
    pub parent: *mut thread_data,
    pub stat_io_bytes: [u64; 3usize],
    pub bw_sample_time: timespec,
    pub stat_io_blocks: [u64; 3usize],
    pub iops_sample_time: timespec,
    pub update_rusage: libc::c_int,
    pub rusage_sem: *mut fio_sem,
    pub ru_start: rusage,
    pub ru_end: rusage,
    pub files: *mut *mut fio_file,
    pub file_locks: *mut libc::c_uchar,
    pub files_size: libc::c_uint,
    pub files_index: libc::c_uint,
    pub nr_open_files: libc::c_uint,
    pub nr_done_files: libc::c_uint,
    pub __bindgen_anon_1: thread_data__bindgen_ty_1,
    pub __bindgen_anon_2: thread_data__bindgen_ty_2,
    pub __bindgen_anon_3: thread_data__bindgen_ty_3,
    pub random_center: f64,
    pub error: libc::c_int,
    pub sig: libc::c_int,
    pub done: libc::c_int,
    pub stop_io: libc::c_int,
    pub pid: pid_t,
    pub orig_buffer: *mut libc::c_char,
    pub orig_buffer_size: usize,
    pub runstate: libc::c_int,
    pub terminate: bool,
    pub last_was_sync: bool,
    pub last_ddir: fio_ddir,
    pub mmapfd: libc::c_int,
    pub iolog_buf: *mut libc::c_void,
    pub iolog_f: *mut FILE,
    pub rand_seeds: [u64; 21usize],
    pub bsrange_state: [frand_state; 3usize],
    pub verify_state: frand_state,
    pub verify_state_last_do_io: frand_state,
    pub trim_state: frand_state,
    pub delay_state: frand_state,
    pub buf_state: frand_state,
    pub buf_state_prev: frand_state,
    pub buf_state_ret: frand_state,
    pub dedupe_state: frand_state,
    pub zone_state: frand_state,
    pub prio_state: frand_state,
    pub dedupe_working_set_index_state: frand_state,
    pub dedupe_working_set_states: *mut frand_state,
    pub num_unique_pages: libc::c_ulonglong,
    pub zone_state_index: *mut *mut zone_split_index,
    pub num_open_zones: libc::c_uint,
    pub verify_batch: libc::c_uint,
    pub trim_batch: libc::c_uint,
    pub vstate: *mut thread_io_list,
    pub shm_id: libc::c_int,
    pub ioprio: libc::c_uint,
    pub io_ops: *mut ioengine_ops,
    pub io_ops_init: libc::c_int,
    pub io_ops_data: *mut libc::c_void,
    pub cur_depth: libc::c_uint,
    pub io_u_queued: libc::c_uint,
    pub io_u_in_flight: libc::c_uint,
    pub io_u_requeues: io_u_ring,
    pub io_u_freelist: io_u_queue,
    pub io_u_all: io_u_queue,
    pub io_u_lock: pthread_mutex_t,
    pub free_cond: pthread_cond_t,
    pub verify_list: flist_head,
    pub verify_threads: *mut pthread_t,
    pub nr_verify_threads: libc::c_uint,
    pub verify_cond: pthread_cond_t,
    pub verify_thread_exit: libc::c_int,
    pub rate_bps: [u64; 3usize],
    pub rate_next_io_time: [u64; 3usize],
    pub last_rate_check_bytes: [libc::c_ulonglong; 3usize],
    pub last_rate_check_blocks: [libc::c_ulong; 3usize],
    pub rate_io_issue_bytes: [libc::c_ulonglong; 3usize],
    pub last_rate_check_time: [timespec; 3usize],
    pub last_usec: [i64; 3usize],
    pub poisson_state: [frand_state; 3usize],
    pub io_wq: workqueue,
    pub total_io_size: u64,
    pub fill_device_size: u64,
    pub io_issues: [u64; 3usize],
    pub verify_read_issues: u64,
    pub io_issue_bytes: [u64; 3usize],
    pub loops: u64,
    pub io_blocks: [u64; 3usize],
    pub this_io_blocks: [u64; 3usize],
    pub io_bytes: [u64; 3usize],
    pub this_io_bytes: [u64; 3usize],
    pub io_skip_bytes: u64,
    pub zone_bytes: u64,
    pub sem: *mut fio_sem,
    pub bytes_done: [u64; 3usize],
    pub bytes_verified: u64,
    pub thinktime_blocks_counter: *mut u64,
    pub last_thinktime: timespec,
    pub last_thinktime_blocks: i64,
    pub random_state: frand_state,
    pub start: timespec,
    pub epoch: timespec,
    pub alternate_epoch: libc::c_ulonglong,
    pub last_issue: timespec,
    pub time_offset: libc::c_long,
    pub ts_cache: timespec,
    pub terminate_time: timespec,
    pub ts_cache_nr: libc::c_uint,
    pub ts_cache_mask: libc::c_uint,
    pub ramp_time_over: bool,
    pub latency_ts: timespec,
    pub latency_qd: libc::c_uint,
    pub latency_qd_high: libc::c_uint,
    pub latency_qd_low: libc::c_uint,
    pub latency_failed: libc::c_uint,
    pub latency_stable_count: libc::c_uint,
    pub latency_ios: u64,
    pub latency_end_run: libc::c_int,
    pub rwmix_state: frand_state,
    pub rwmix_issues: libc::c_ulong,
    pub rwmix_ddir: fio_ddir,
    pub ddir_seq_nr: libc::c_uint,
    pub seq_rand_state: [frand_state; 3usize],
    pub io_hist_tree: rb_root,
    pub io_hist_list: flist_head,
    pub io_hist_len: libc::c_ulong,
    pub io_log_list: flist_head,
    pub io_log_rfile: *mut FILE,
    pub io_log_blktrace: libc::c_uint,
    pub io_log_blktrace_swap: libc::c_uint,
    pub io_log_last_ttime: libc::c_ulonglong,
    pub io_log_start_time: timespec,
    pub io_log_current: libc::c_uint,
    pub io_log_checkmark: libc::c_uint,
    pub io_log_highmark: libc::c_uint,
    pub io_log_version: libc::c_uint,
    pub io_log_highmark_time: timespec,
    pub trim_list: flist_head,
    pub trim_entries: libc::c_ulong,
    pub file_service_nr: libc::c_uint,
    pub file_service_left: libc::c_uint,
    pub file_service_file: *mut fio_file,
    pub sync_file_range_nr: libc::c_uint,
    pub file_size_state: frand_state,
    pub total_err_count: libc::c_uint,
    pub first_error: libc::c_int,
    pub flow: *mut fio_flow,
    pub flow_counter: libc::c_ulonglong,
    pub prof_io_ops: prof_io_ops,
    pub prof_data: *mut libc::c_void,
    pub pinned_mem: *mut libc::c_void,
    pub ss: steadystate_data,
    pub verror: [libc::c_char; 128usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_1 {
    pub next_file:       libc::c_uint,
    pub next_file_state: frand_state,
}
#[test]
fn bindgen_test_layout_thread_data__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<thread_data__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_data__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(thread_data__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).next_file) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_1),
            "::",
            stringify!(next_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).next_file_state) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_1),
            "::",
            stringify!(next_file_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_2 {
    pub next_file_zipf:  zipf_state,
    pub next_file_gauss: gauss_state,
}
#[test]
fn bindgen_test_layout_thread_data__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<thread_data__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_data__bindgen_ty_2>(),
        104usize,
        concat!("Size of: ", stringify!(thread_data__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).next_file_zipf) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_2),
            "::",
            stringify!(next_file_zipf)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).next_file_gauss) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_2),
            "::",
            stringify!(next_file_gauss)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_3 {
    pub zipf_theta: f64,
    pub pareto_h:   f64,
    pub gauss_dev:  f64,
}
#[test]
fn bindgen_test_layout_thread_data__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<thread_data__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_data__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(thread_data__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zipf_theta) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_3),
            "::",
            stringify!(zipf_theta)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pareto_h) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_3),
            "::",
            stringify!(pareto_h)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gauss_dev) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_3),
            "::",
            stringify!(gauss_dev)
        )
    );
}
#[test]
fn bindgen_test_layout_thread_data() {
    const UNINIT: ::std::mem::MaybeUninit<thread_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_data>(),
        190848usize,
        concat!("Size of: ", stringify!(thread_data))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).opt_list) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(opt_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eo) as usize - ptr as usize },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(eo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        3288usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_number) as usize - ptr as usize
        },
        3296usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(thread_number)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).subjob_number) as usize - ptr as usize
        },
        3300usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(subjob_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupid) as usize - ptr as usize },
        3304usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(groupid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        3312usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).client_type) as usize - ptr as usize
        },
        187200usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(client_type)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).slat_log) as usize - ptr as usize
        },
        187208usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(slat_log)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clat_log) as usize - ptr as usize
        },
        187216usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(clat_log)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clat_hist_log) as usize - ptr as usize
        },
        187224usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(clat_hist_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat_log) as usize - ptr as usize },
        187232usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(lat_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bw_log) as usize - ptr as usize },
        187240usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bw_log)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iops_log) as usize - ptr as usize
        },
        187248usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iops_log)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log_compress_wq) as usize - ptr as usize
        },
        187256usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(log_compress_wq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        187400usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stat_io_bytes) as usize - ptr as usize
        },
        187408usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(stat_io_bytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bw_sample_time) as usize - ptr as usize
        },
        187432usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bw_sample_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).stat_io_blocks) as usize - ptr as usize
        },
        187448usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(stat_io_blocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iops_sample_time) as usize -
                ptr as usize
        },
        187472usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iops_sample_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).update_rusage) as usize - ptr as usize
        },
        187488usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(update_rusage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rusage_sem) as usize - ptr as usize
        },
        187496usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rusage_sem)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ru_start) as usize - ptr as usize
        },
        187504usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ru_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_end) as usize - ptr as usize },
        187648usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ru_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        187792usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_locks) as usize - ptr as usize
        },
        187800usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_locks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).files_size) as usize - ptr as usize
        },
        187808usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(files_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).files_index) as usize - ptr as usize
        },
        187812usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(files_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).nr_open_files) as usize - ptr as usize
        },
        187816usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(nr_open_files)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).nr_done_files) as usize - ptr as usize
        },
        187820usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(nr_done_files)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).random_center) as usize - ptr as usize
        },
        187984usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(random_center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        187992usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        187996usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).done) as usize - ptr as usize },
        188000usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_io) as usize - ptr as usize },
        188004usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(stop_io)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        188008usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).orig_buffer) as usize - ptr as usize
        },
        188016usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(orig_buffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).orig_buffer_size) as usize -
                ptr as usize
        },
        188024usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(orig_buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).runstate) as usize - ptr as usize
        },
        188032usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(runstate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).terminate) as usize - ptr as usize
        },
        188036usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(terminate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_was_sync) as usize - ptr as usize
        },
        188037usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_was_sync)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_ddir) as usize - ptr as usize
        },
        188040usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_ddir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmapfd) as usize - ptr as usize },
        188044usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(mmapfd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).iolog_buf) as usize - ptr as usize
        },
        188048usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iolog_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iolog_f) as usize - ptr as usize },
        188056usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iolog_f)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rand_seeds) as usize - ptr as usize
        },
        188064usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rand_seeds)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bsrange_state) as usize - ptr as usize
        },
        188232usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bsrange_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_state) as usize - ptr as usize
        },
        188376usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_state_last_do_io) as usize -
                ptr as usize
        },
        188424usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_state_last_do_io)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trim_state) as usize - ptr as usize
        },
        188472usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).delay_state) as usize - ptr as usize
        },
        188520usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(delay_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_state) as usize - ptr as usize
        },
        188568usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(buf_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_state_prev) as usize - ptr as usize
        },
        188616usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(buf_state_prev)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).buf_state_ret) as usize - ptr as usize
        },
        188664usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(buf_state_ret)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dedupe_state) as usize - ptr as usize
        },
        188712usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(dedupe_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zone_state) as usize - ptr as usize
        },
        188760usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(zone_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prio_state) as usize - ptr as usize
        },
        188808usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(prio_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dedupe_working_set_index_state) as usize -
                ptr as usize
        },
        188856usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(dedupe_working_set_index_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dedupe_working_set_states) as usize -
                ptr as usize
        },
        188904usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(dedupe_working_set_states)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_unique_pages) as usize -
                ptr as usize
        },
        188912usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(num_unique_pages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zone_state_index) as usize -
                ptr as usize
        },
        188920usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(zone_state_index)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_open_zones) as usize - ptr as usize
        },
        188928usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(num_open_zones)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_batch) as usize - ptr as usize
        },
        188932usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_batch)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trim_batch) as usize - ptr as usize
        },
        188936usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_batch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vstate) as usize - ptr as usize },
        188944usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(vstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_id) as usize - ptr as usize },
        188952usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(shm_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioprio) as usize - ptr as usize },
        188956usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ioprio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_ops) as usize - ptr as usize },
        188960usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_ops)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_ops_init) as usize - ptr as usize
        },
        188968usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_ops_init)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_ops_data) as usize - ptr as usize
        },
        188976usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_ops_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cur_depth) as usize - ptr as usize
        },
        188984usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(cur_depth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_queued) as usize - ptr as usize
        },
        188988usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_queued)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_in_flight) as usize - ptr as usize
        },
        188992usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_in_flight)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_requeues) as usize - ptr as usize
        },
        189000usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_requeues)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_freelist) as usize - ptr as usize
        },
        189024usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_freelist)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_all) as usize - ptr as usize
        },
        189040usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_all)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_u_lock) as usize - ptr as usize
        },
        189056usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_lock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).free_cond) as usize - ptr as usize
        },
        189064usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(free_cond)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_list) as usize - ptr as usize
        },
        189072usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_list)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_threads) as usize - ptr as usize
        },
        189088usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_threads)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).nr_verify_threads) as usize -
                ptr as usize
        },
        189096usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(nr_verify_threads)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_cond) as usize - ptr as usize
        },
        189104usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_cond)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_thread_exit) as usize -
                ptr as usize
        },
        189112usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_thread_exit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rate_bps) as usize - ptr as usize
        },
        189120usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rate_bps)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rate_next_io_time) as usize -
                ptr as usize
        },
        189144usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rate_next_io_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_rate_check_bytes) as usize -
                ptr as usize
        },
        189168usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_rate_check_bytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_rate_check_blocks) as usize -
                ptr as usize
        },
        189192usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_rate_check_blocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rate_io_issue_bytes) as usize -
                ptr as usize
        },
        189216usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rate_io_issue_bytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_rate_check_time) as usize -
                ptr as usize
        },
        189240usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_rate_check_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_usec) as usize - ptr as usize
        },
        189288usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_usec)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).poisson_state) as usize - ptr as usize
        },
        189312usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(poisson_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_wq) as usize - ptr as usize },
        189456usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_wq)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_io_size) as usize - ptr as usize
        },
        189600usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(total_io_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fill_device_size) as usize -
                ptr as usize
        },
        189608usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(fill_device_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_issues) as usize - ptr as usize
        },
        189616usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_issues)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).verify_read_issues) as usize -
                ptr as usize
        },
        189640usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_read_issues)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_issue_bytes) as usize - ptr as usize
        },
        189648usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_issue_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loops) as usize - ptr as usize },
        189672usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(loops)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_blocks) as usize - ptr as usize
        },
        189680usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_blocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).this_io_blocks) as usize - ptr as usize
        },
        189704usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(this_io_blocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_bytes) as usize - ptr as usize
        },
        189728usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_bytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).this_io_bytes) as usize - ptr as usize
        },
        189752usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(this_io_bytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_skip_bytes) as usize - ptr as usize
        },
        189776usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_skip_bytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).zone_bytes) as usize - ptr as usize
        },
        189784usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(zone_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sem) as usize - ptr as usize },
        189792usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(sem)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bytes_done) as usize - ptr as usize
        },
        189800usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bytes_done)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bytes_verified) as usize - ptr as usize
        },
        189824usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bytes_verified)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thinktime_blocks_counter) as usize -
                ptr as usize
        },
        189832usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(thinktime_blocks_counter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_thinktime) as usize - ptr as usize
        },
        189840usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_thinktime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_thinktime_blocks) as usize -
                ptr as usize
        },
        189856usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_thinktime_blocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).random_state) as usize - ptr as usize
        },
        189864usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(random_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        189912usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epoch) as usize - ptr as usize },
        189928usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(epoch)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).alternate_epoch) as usize - ptr as usize
        },
        189944usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(alternate_epoch)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).last_issue) as usize - ptr as usize
        },
        189952usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_issue)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).time_offset) as usize - ptr as usize
        },
        189968usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(time_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ts_cache) as usize - ptr as usize
        },
        189976usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts_cache)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).terminate_time) as usize - ptr as usize
        },
        189992usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(terminate_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ts_cache_nr) as usize - ptr as usize
        },
        190008usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts_cache_nr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ts_cache_mask) as usize - ptr as usize
        },
        190012usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts_cache_mask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ramp_time_over) as usize - ptr as usize
        },
        190016usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ramp_time_over)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_ts) as usize - ptr as usize
        },
        190024usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_ts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_qd) as usize - ptr as usize
        },
        190040usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_qd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_qd_high) as usize - ptr as usize
        },
        190044usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_qd_high)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_qd_low) as usize - ptr as usize
        },
        190048usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_qd_low)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_failed) as usize - ptr as usize
        },
        190052usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_failed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_stable_count) as usize -
                ptr as usize
        },
        190056usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_stable_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_ios) as usize - ptr as usize
        },
        190064usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_ios)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).latency_end_run) as usize - ptr as usize
        },
        190072usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_end_run)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rwmix_state) as usize - ptr as usize
        },
        190080usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rwmix_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rwmix_issues) as usize - ptr as usize
        },
        190128usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rwmix_issues)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rwmix_ddir) as usize - ptr as usize
        },
        190136usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rwmix_ddir)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ddir_seq_nr) as usize - ptr as usize
        },
        190140usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ddir_seq_nr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).seq_rand_state) as usize - ptr as usize
        },
        190144usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(seq_rand_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_hist_tree) as usize - ptr as usize
        },
        190288usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_hist_tree)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_hist_list) as usize - ptr as usize
        },
        190296usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_hist_list)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_hist_len) as usize - ptr as usize
        },
        190312usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_hist_len)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_list) as usize - ptr as usize
        },
        190320usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_list)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_rfile) as usize - ptr as usize
        },
        190336usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_rfile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_blktrace) as usize - ptr as usize
        },
        190344usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_blktrace)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_blktrace_swap) as usize -
                ptr as usize
        },
        190348usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_blktrace_swap)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_last_ttime) as usize -
                ptr as usize
        },
        190352usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_last_ttime)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_start_time) as usize -
                ptr as usize
        },
        190360usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_start_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_current) as usize - ptr as usize
        },
        190376usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_current)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_checkmark) as usize -
                ptr as usize
        },
        190380usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_checkmark)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_highmark) as usize - ptr as usize
        },
        190384usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_highmark)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_version) as usize - ptr as usize
        },
        190388usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_version)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).io_log_highmark_time) as usize -
                ptr as usize
        },
        190392usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_highmark_time)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trim_list) as usize - ptr as usize
        },
        190408usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_list)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).trim_entries) as usize - ptr as usize
        },
        190424usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_entries)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_service_nr) as usize - ptr as usize
        },
        190432usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_service_nr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_service_left) as usize -
                ptr as usize
        },
        190436usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_service_left)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_service_file) as usize -
                ptr as usize
        },
        190440usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_service_file)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sync_file_range_nr) as usize -
                ptr as usize
        },
        190448usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(sync_file_range_nr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).file_size_state) as usize - ptr as usize
        },
        190456usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_size_state)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_err_count) as usize - ptr as usize
        },
        190504usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(total_err_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).first_error) as usize - ptr as usize
        },
        190508usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(first_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow) as usize - ptr as usize },
        190512usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).flow_counter) as usize - ptr as usize
        },
        190520usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(flow_counter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prof_io_ops) as usize - ptr as usize
        },
        190528usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(prof_io_ops)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prof_data) as usize - ptr as usize
        },
        190552usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(prof_data)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pinned_mem) as usize - ptr as usize
        },
        190560usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(pinned_mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss) as usize - ptr as usize },
        190568usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).verror) as usize - ptr as usize },
        190720usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verror)
        )
    );
}
pub const opt_category___FIO_OPT_C_GENERAL: opt_category = 0;
pub const opt_category___FIO_OPT_C_IO: opt_category = 1;
pub const opt_category___FIO_OPT_C_FILE: opt_category = 2;
pub const opt_category___FIO_OPT_C_STAT: opt_category = 3;
pub const opt_category___FIO_OPT_C_LOG: opt_category = 4;
pub const opt_category___FIO_OPT_C_PROFILE: opt_category = 5;
pub const opt_category___FIO_OPT_C_ENGINE: opt_category = 6;
pub const opt_category___FIO_OPT_C_NR: opt_category = 7;
pub const opt_category_FIO_OPT_C_GENERAL: opt_category = 1;
pub const opt_category_FIO_OPT_C_IO: opt_category = 2;
pub const opt_category_FIO_OPT_C_FILE: opt_category = 4;
pub const opt_category_FIO_OPT_C_STAT: opt_category = 8;
pub const opt_category_FIO_OPT_C_LOG: opt_category = 16;
pub const opt_category_FIO_OPT_C_PROFILE: opt_category = 32;
pub const opt_category_FIO_OPT_C_ENGINE: opt_category = 64;
pub const opt_category_FIO_OPT_C_INVALID: opt_category = 128;
pub type opt_category = libc::c_uint;
pub const opt_category_group___FIO_OPT_G_RATE: opt_category_group = 0;
pub const opt_category_group___FIO_OPT_G_ZONE: opt_category_group = 1;
pub const opt_category_group___FIO_OPT_G_RWMIX: opt_category_group = 2;
pub const opt_category_group___FIO_OPT_G_VERIFY: opt_category_group = 3;
pub const opt_category_group___FIO_OPT_G_TRIM: opt_category_group = 4;
pub const opt_category_group___FIO_OPT_G_IOLOG: opt_category_group = 5;
pub const opt_category_group___FIO_OPT_G_IO_DEPTH: opt_category_group = 6;
pub const opt_category_group___FIO_OPT_G_IO_FLOW: opt_category_group = 7;
pub const opt_category_group___FIO_OPT_G_DESC: opt_category_group = 8;
pub const opt_category_group___FIO_OPT_G_FILENAME: opt_category_group = 9;
pub const opt_category_group___FIO_OPT_G_IO_BASIC: opt_category_group = 10;
pub const opt_category_group___FIO_OPT_G_CGROUP: opt_category_group = 11;
pub const opt_category_group___FIO_OPT_G_RUNTIME: opt_category_group = 12;
pub const opt_category_group___FIO_OPT_G_PROCESS: opt_category_group = 13;
pub const opt_category_group___FIO_OPT_G_CRED: opt_category_group = 14;
pub const opt_category_group___FIO_OPT_G_CLOCK: opt_category_group = 15;
pub const opt_category_group___FIO_OPT_G_IO_TYPE: opt_category_group = 16;
pub const opt_category_group___FIO_OPT_G_THINKTIME: opt_category_group = 17;
pub const opt_category_group___FIO_OPT_G_RANDOM: opt_category_group = 18;
pub const opt_category_group___FIO_OPT_G_IO_BUF: opt_category_group = 19;
pub const opt_category_group___FIO_OPT_G_TIOBENCH: opt_category_group = 20;
pub const opt_category_group___FIO_OPT_G_ERR: opt_category_group = 21;
pub const opt_category_group___FIO_OPT_G_E4DEFRAG: opt_category_group = 22;
pub const opt_category_group___FIO_OPT_G_NETIO: opt_category_group = 23;
pub const opt_category_group___FIO_OPT_G_RDMA: opt_category_group = 24;
pub const opt_category_group___FIO_OPT_G_LIBRPMA: opt_category_group = 25;
pub const opt_category_group___FIO_OPT_G_LIBAIO: opt_category_group = 26;
pub const opt_category_group___FIO_OPT_G_ACT: opt_category_group = 27;
pub const opt_category_group___FIO_OPT_G_LATPROF: opt_category_group = 28;
pub const opt_category_group___FIO_OPT_G_RBD: opt_category_group = 29;
pub const opt_category_group___FIO_OPT_G_HTTP: opt_category_group = 30;
pub const opt_category_group___FIO_OPT_G_GFAPI: opt_category_group = 31;
pub const opt_category_group___FIO_OPT_G_MTD: opt_category_group = 32;
pub const opt_category_group___FIO_OPT_G_HDFS: opt_category_group = 33;
pub const opt_category_group___FIO_OPT_G_SG: opt_category_group = 34;
pub const opt_category_group___FIO_OPT_G_MMAP: opt_category_group = 35;
pub const opt_category_group___FIO_OPT_G_ISCSI: opt_category_group = 36;
pub const opt_category_group___FIO_OPT_G_NBD: opt_category_group = 37;
pub const opt_category_group___FIO_OPT_G_IOURING: opt_category_group = 38;
pub const opt_category_group___FIO_OPT_G_FILESTAT: opt_category_group = 39;
pub const opt_category_group___FIO_OPT_G_NR: opt_category_group = 40;
pub const opt_category_group___FIO_OPT_G_LIBCUFILE: opt_category_group = 41;
pub const opt_category_group___FIO_OPT_G_DFS: opt_category_group = 42;
pub const opt_category_group___FIO_OPT_G_NFS: opt_category_group = 43;
pub const opt_category_group___FIO_OPT_G_WINDOWSAIO: opt_category_group = 44;
pub const opt_category_group___FIO_OPT_G_XNVME: opt_category_group = 45;
pub const opt_category_group___FIO_OPT_G_LIBBLKIO: opt_category_group = 46;
pub const opt_category_group_FIO_OPT_G_RATE: opt_category_group = 1;
pub const opt_category_group_FIO_OPT_G_ZONE: opt_category_group = 2;
pub const opt_category_group_FIO_OPT_G_RWMIX: opt_category_group = 4;
pub const opt_category_group_FIO_OPT_G_VERIFY: opt_category_group = 8;
pub const opt_category_group_FIO_OPT_G_TRIM: opt_category_group = 16;
pub const opt_category_group_FIO_OPT_G_IOLOG: opt_category_group = 32;
pub const opt_category_group_FIO_OPT_G_IO_DEPTH: opt_category_group = 64;
pub const opt_category_group_FIO_OPT_G_IO_FLOW: opt_category_group = 128;
pub const opt_category_group_FIO_OPT_G_DESC: opt_category_group = 256;
pub const opt_category_group_FIO_OPT_G_FILENAME: opt_category_group = 512;
pub const opt_category_group_FIO_OPT_G_IO_BASIC: opt_category_group = 1024;
pub const opt_category_group_FIO_OPT_G_CGROUP: opt_category_group = 2048;
pub const opt_category_group_FIO_OPT_G_RUNTIME: opt_category_group = 4096;
pub const opt_category_group_FIO_OPT_G_PROCESS: opt_category_group = 8192;
pub const opt_category_group_FIO_OPT_G_CRED: opt_category_group = 16384;
pub const opt_category_group_FIO_OPT_G_CLOCK: opt_category_group = 32768;
pub const opt_category_group_FIO_OPT_G_IO_TYPE: opt_category_group = 65536;
pub const opt_category_group_FIO_OPT_G_THINKTIME: opt_category_group = 131072;
pub const opt_category_group_FIO_OPT_G_RANDOM: opt_category_group = 262144;
pub const opt_category_group_FIO_OPT_G_IO_BUF: opt_category_group = 524288;
pub const opt_category_group_FIO_OPT_G_TIOBENCH: opt_category_group = 1048576;
pub const opt_category_group_FIO_OPT_G_ERR: opt_category_group = 2097152;
pub const opt_category_group_FIO_OPT_G_E4DEFRAG: opt_category_group = 4194304;
pub const opt_category_group_FIO_OPT_G_NETIO: opt_category_group = 8388608;
pub const opt_category_group_FIO_OPT_G_RDMA: opt_category_group = 16777216;
pub const opt_category_group_FIO_OPT_G_LIBRPMA: opt_category_group = 33554432;
pub const opt_category_group_FIO_OPT_G_LIBAIO: opt_category_group = 67108864;
pub const opt_category_group_FIO_OPT_G_ACT: opt_category_group = 134217728;
pub const opt_category_group_FIO_OPT_G_LATPROF: opt_category_group = 268435456;
pub const opt_category_group_FIO_OPT_G_RBD: opt_category_group = 536870912;
pub const opt_category_group_FIO_OPT_G_HTTP: opt_category_group = 1073741824;
pub const opt_category_group_FIO_OPT_G_GFAPI: opt_category_group = 2147483648;
pub const opt_category_group_FIO_OPT_G_MTD: opt_category_group = 4294967296;
pub const opt_category_group_FIO_OPT_G_HDFS: opt_category_group = 8589934592;
pub const opt_category_group_FIO_OPT_G_SG: opt_category_group = 17179869184;
pub const opt_category_group_FIO_OPT_G_MMAP: opt_category_group = 34359738368;
pub const opt_category_group_FIO_OPT_G_INVALID: opt_category_group =
    1099511627776;
pub const opt_category_group_FIO_OPT_G_ISCSI: opt_category_group = 68719476736;
pub const opt_category_group_FIO_OPT_G_NBD: opt_category_group = 137438953472;
pub const opt_category_group_FIO_OPT_G_NFS: opt_category_group = 8796093022208;
pub const opt_category_group_FIO_OPT_G_IOURING: opt_category_group =
    274877906944;
pub const opt_category_group_FIO_OPT_G_FILESTAT: opt_category_group =
    549755813888;
pub const opt_category_group_FIO_OPT_G_LIBCUFILE: opt_category_group =
    2199023255552;
pub const opt_category_group_FIO_OPT_G_DFS: opt_category_group = 4398046511104;
pub const opt_category_group_FIO_OPT_G_WINDOWSAIO: opt_category_group =
    17592186044416;
pub const opt_category_group_FIO_OPT_G_XNVME: opt_category_group =
    35184372088832;
pub const opt_category_group_FIO_OPT_G_LIBBLKIO: opt_category_group =
    70368744177664;
pub type opt_category_group = libc::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_rwlock {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mr {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_io_list {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_flow {
    pub _address: u8,
}
