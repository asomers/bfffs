#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(unused)]
#![cfg_attr(test, allow(deref_nullptr))]
#![allow(clippy::all)]
use libc::timespec;
/* automatically generated by rust-bindgen 0.59.2 */

pub const FIO_IOOPS_VERSION: u32 = 31;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __size_t = __uint64_t;
pub type __time_t = __int64_t;
pub type __pid_t = __int32_t;
pub type pthread_t = u64;
pub type pthread_mutex_t = u64;
pub type pthread_cond_t = u64;
pub type pid_t = __pid_t;
pub type size_t = __size_t;
pub type time_t = __time_t;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub _bindgen_opaque_blob: [u64; 18usize],
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
}
pub type FILE = [u64; 39usize];
pub const fio_ddir_DDIR_READ: fio_ddir = 0;
pub const fio_ddir_DDIR_WRITE: fio_ddir = 1;
pub const fio_ddir_DDIR_TRIM: fio_ddir = 2;
pub const fio_ddir_DDIR_SYNC: fio_ddir = 3;
pub const fio_ddir_DDIR_DATASYNC: fio_ddir = 4;
pub const fio_ddir_DDIR_SYNC_FILE_RANGE: fio_ddir = 5;
pub const fio_ddir_DDIR_WAIT: fio_ddir = 6;
pub const fio_ddir_DDIR_LAST: fio_ddir = 7;
pub const fio_ddir_DDIR_INVAL: fio_ddir = -1;
pub const fio_ddir_DDIR_RWDIR_CNT: fio_ddir = 3;
pub const fio_ddir_DDIR_RWDIR_SYNC_CNT: fio_ddir = 4;
pub type fio_ddir = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flist_head {
    pub next: *mut flist_head,
    pub prev: *mut flist_head,
}
#[test]
fn bindgen_test_layout_flist_head() {
    assert_eq!(
        ::std::mem::size_of::<flist_head>(),
        16usize,
        concat!("Size of: ", stringify!(flist_head))
    );
    assert_eq!(
        ::std::mem::align_of::<flist_head>(),
        8usize,
        concat!("Alignment of ", stringify!(flist_head))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flist_head>())).next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flist_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<flist_head>())).prev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flist_head),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taus88_state {
    pub s1: libc::c_uint,
    pub s2: libc::c_uint,
    pub s3: libc::c_uint,
}
#[test]
fn bindgen_test_layout_taus88_state() {
    assert_eq!(
        ::std::mem::size_of::<taus88_state>(),
        12usize,
        concat!("Size of: ", stringify!(taus88_state))
    );
    assert_eq!(
        ::std::mem::align_of::<taus88_state>(),
        4usize,
        concat!("Alignment of ", stringify!(taus88_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus88_state>())).s1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taus88_state),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus88_state>())).s2 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(taus88_state),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus88_state>())).s3 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taus88_state),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taus258_state {
    pub s1: u64,
    pub s2: u64,
    pub s3: u64,
    pub s4: u64,
    pub s5: u64,
}
#[test]
fn bindgen_test_layout_taus258_state() {
    assert_eq!(
        ::std::mem::size_of::<taus258_state>(),
        40usize,
        concat!("Size of: ", stringify!(taus258_state))
    );
    assert_eq!(
        ::std::mem::align_of::<taus258_state>(),
        8usize,
        concat!("Alignment of ", stringify!(taus258_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus258_state>())).s1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus258_state>())).s2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus258_state>())).s3 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus258_state>())).s4 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<taus258_state>())).s5 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taus258_state),
            "::",
            stringify!(s5)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct frand_state {
    pub _bindgen_opaque_blob: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union frand_state__bindgen_ty_1 {
    pub state32: taus88_state,
    pub state64: taus258_state,
}
#[test]
fn bindgen_test_layout_frand_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<frand_state__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(frand_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<frand_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(frand_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<frand_state__bindgen_ty_1>())).state32
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frand_state__bindgen_ty_1),
            "::",
            stringify!(state32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<frand_state__bindgen_ty_1>())).state64
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frand_state__bindgen_ty_1),
            "::",
            stringify!(state64)
        )
    );
}
#[test]
fn bindgen_test_layout_frand_state() {
    assert_eq!(
        ::std::mem::size_of::<frand_state>(),
        48usize,
        concat!("Size of: ", stringify!(frand_state))
    );
    assert_eq!(
        ::std::mem::align_of::<frand_state>(),
        8usize,
        concat!("Alignment of ", stringify!(frand_state))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct zipf_state {
    pub _bindgen_opaque_blob: [u64; 13usize],
}
#[test]
fn bindgen_test_layout_zipf_state() {
    assert_eq!(
        ::std::mem::size_of::<zipf_state>(),
        104usize,
        concat!("Size of: ", stringify!(zipf_state))
    );
    assert_eq!(
        ::std::mem::align_of::<zipf_state>(),
        8usize,
        concat!("Alignment of ", stringify!(zipf_state))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct axmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fio_lfsr {
    pub _bindgen_opaque_blob: [u64; 8usize],
}
#[test]
fn bindgen_test_layout_fio_lfsr() {
    assert_eq!(
        ::std::mem::size_of::<fio_lfsr>(),
        64usize,
        concat!("Size of: ", stringify!(fio_lfsr))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_lfsr>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_lfsr))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct gauss_state {
    pub _bindgen_opaque_blob: [u64; 9usize],
}
#[test]
fn bindgen_test_layout_gauss_state() {
    assert_eq!(
        ::std::mem::size_of::<gauss_state>(),
        72usize,
        concat!("Size of: ", stringify!(gauss_state))
    );
    assert_eq!(
        ::std::mem::align_of::<gauss_state>(),
        8usize,
        concat!("Alignment of ", stringify!(gauss_state))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zoned_block_device_info {
    _unused: [u8; 0],
}
pub const fio_filetype_FIO_TYPE_FILE: fio_filetype = 1;
pub const fio_filetype_FIO_TYPE_BLOCK: fio_filetype = 2;
pub const fio_filetype_FIO_TYPE_CHAR: fio_filetype = 3;
pub const fio_filetype_FIO_TYPE_PIPE: fio_filetype = 4;
pub type fio_filetype = libc::c_uint;
pub const fio_file_flags_FIO_FILE_open: fio_file_flags = 1;
pub const fio_file_flags_FIO_FILE_closing: fio_file_flags = 2;
pub const fio_file_flags_FIO_FILE_extend: fio_file_flags = 4;
pub const fio_file_flags_FIO_FILE_done: fio_file_flags = 8;
pub const fio_file_flags_FIO_FILE_size_known: fio_file_flags = 16;
pub const fio_file_flags_FIO_FILE_hashed: fio_file_flags = 32;
pub const fio_file_flags_FIO_FILE_partial_mmap: fio_file_flags = 64;
pub const fio_file_flags_FIO_FILE_axmap: fio_file_flags = 128;
pub const fio_file_flags_FIO_FILE_lfsr: fio_file_flags = 256;
pub const fio_file_flags_FIO_FILE_smalloc: fio_file_flags = 512;
pub type fio_file_flags = libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fio_file {
    pub hash_list:        flist_head,
    pub filetype:         fio_filetype,
    pub fd:               libc::c_int,
    pub shadow_fd:        libc::c_int,
    pub major:            libc::c_uint,
    pub minor:            libc::c_uint,
    pub fileno:           libc::c_int,
    pub file_name:        *mut libc::c_char,
    pub real_file_size:   u64,
    pub file_offset:      u64,
    pub io_size:          u64,
    pub zbd_info:         *mut zoned_block_device_info,
    pub min_zone:         u32,
    pub max_zone:         u32,
    pub last_pos:         [u64; 3usize],
    pub last_start:       [u64; 3usize],
    pub first_write:      u64,
    pub last_write:       u64,
    pub last_write_comp:  *mut u64,
    pub last_write_idx:   libc::c_uint,
    pub __bindgen_anon_1: fio_file__bindgen_ty_1,
    pub __bindgen_anon_2: fio_file__bindgen_ty_2,
    pub __bindgen_anon_3: fio_file__bindgen_ty_3,
    pub __bindgen_anon_4: fio_file__bindgen_ty_4,
    pub references:       libc::c_int,
    pub flags:            fio_file_flags,
    pub du:               *mut disk_util,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_1 {
    pub engine_pos:  u64,
    pub engine_data: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_fio_file__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<fio_file__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(fio_file__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_1>())).engine_pos
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_1),
            "::",
            stringify!(engine_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_1>())).engine_data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_1),
            "::",
            stringify!(engine_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_2 {
    pub lock:   *mut fio_sem,
    pub rwlock: *mut fio_rwlock,
}
#[test]
fn bindgen_test_layout_fio_file__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<fio_file__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(fio_file__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_2>())).lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_2),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_2>())).rwlock
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_2),
            "::",
            stringify!(rwlock)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_3 {
    pub io_axmap: *mut axmap,
    pub lfsr:     fio_lfsr,
}
#[test]
fn bindgen_test_layout_fio_file__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<fio_file__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(fio_file__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_3>())).io_axmap
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_3),
            "::",
            stringify!(io_axmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_3>())).lfsr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_3),
            "::",
            stringify!(lfsr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_4 {
    pub zipf:  zipf_state,
    pub gauss: gauss_state,
}
#[test]
fn bindgen_test_layout_fio_file__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<fio_file__bindgen_ty_4>(),
        104usize,
        concat!("Size of: ", stringify!(fio_file__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_4>())).zipf as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_4),
            "::",
            stringify!(zipf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file__bindgen_ty_4>())).gauss as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file__bindgen_ty_4),
            "::",
            stringify!(gauss)
        )
    );
}
#[test]
fn bindgen_test_layout_fio_file() {
    assert_eq!(
        ::std::mem::size_of::<fio_file>(),
        368usize,
        concat!("Size of: ", stringify!(fio_file))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_file>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_file))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).hash_list as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(hash_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).filetype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(filetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fio_file>())).fd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).shadow_fd as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(shadow_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).major as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).minor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).fileno as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).file_name as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(file_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).real_file_size as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(real_file_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).file_offset as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(file_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).io_size as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(io_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).zbd_info as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(zbd_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).min_zone as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(min_zone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).max_zone as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(max_zone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).last_pos as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).last_start as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).first_write as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(first_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).last_write as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).last_write_comp as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_write_comp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).last_write_idx as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(last_write_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).references as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_file>())).flags as *const _ as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fio_file>())).du as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_file),
            "::",
            stringify!(du)
        )
    );
}
pub type os_aiocb_t = [u64; 20usize];
pub const fio_opt_type_FIO_OPT_INVALID: fio_opt_type = 0;
pub const fio_opt_type_FIO_OPT_STR: fio_opt_type = 1;
pub const fio_opt_type_FIO_OPT_STR_ULL: fio_opt_type = 2;
pub const fio_opt_type_FIO_OPT_STR_MULTI: fio_opt_type = 3;
pub const fio_opt_type_FIO_OPT_STR_VAL: fio_opt_type = 4;
pub const fio_opt_type_FIO_OPT_STR_VAL_TIME: fio_opt_type = 5;
pub const fio_opt_type_FIO_OPT_STR_STORE: fio_opt_type = 6;
pub const fio_opt_type_FIO_OPT_RANGE: fio_opt_type = 7;
pub const fio_opt_type_FIO_OPT_INT: fio_opt_type = 8;
pub const fio_opt_type_FIO_OPT_ULL: fio_opt_type = 9;
pub const fio_opt_type_FIO_OPT_BOOL: fio_opt_type = 10;
pub const fio_opt_type_FIO_OPT_FLOAT_LIST: fio_opt_type = 11;
pub const fio_opt_type_FIO_OPT_STR_SET: fio_opt_type = 12;
pub const fio_opt_type_FIO_OPT_STR_VAL_ZONE: fio_opt_type = 13;
pub const fio_opt_type_FIO_OPT_DEPRECATED: fio_opt_type = 14;
pub const fio_opt_type_FIO_OPT_SOFT_DEPRECATED: fio_opt_type = 15;
pub const fio_opt_type_FIO_OPT_UNSUPPORTED: fio_opt_type = 16;
pub type fio_opt_type = libc::c_uint;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct value_pair {
    pub _bindgen_opaque_blob: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_value_pair() {
    assert_eq!(
        ::std::mem::size_of::<value_pair>(),
        40usize,
        concat!("Size of: ", stringify!(value_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<value_pair>(),
        8usize,
        concat!("Alignment of ", stringify!(value_pair))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_option {
    pub name:        *const libc::c_char,
    pub lname:       *const libc::c_char,
    pub alias:       *const libc::c_char,
    pub type_:       fio_opt_type,
    pub off1:        libc::c_uint,
    pub off2:        libc::c_uint,
    pub off3:        libc::c_uint,
    pub off4:        libc::c_uint,
    pub off5:        libc::c_uint,
    pub off6:        libc::c_uint,
    pub maxval:      libc::c_ulonglong,
    pub minval:      libc::c_int,
    pub maxfp:       f64,
    pub minfp:       f64,
    pub interval:    libc::c_uint,
    pub maxlen:      libc::c_uint,
    pub neg:         libc::c_int,
    pub prio:        libc::c_int,
    pub cb:          *mut libc::c_void,
    pub help:        *const libc::c_char,
    pub def:         *const libc::c_char,
    pub posval:      [value_pair; 32usize],
    pub parent:      *const libc::c_char,
    pub hide:        libc::c_int,
    pub hide_on_set: libc::c_int,
    pub inverse:     *const libc::c_char,
    pub inv_opt:     *mut fio_option,
    pub verify: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const fio_option,
            arg2: *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub prof_name:   *const libc::c_char,
    pub prof_opts:   *mut libc::c_void,
    pub category:    u64,
    pub group:       u64,
    pub gui_data:    *mut libc::c_void,
    pub is_seconds:  libc::c_int,
    pub is_time:     libc::c_int,
    pub no_warn_def: libc::c_int,
    pub pow2:        libc::c_int,
    pub no_free:     libc::c_int,
}
#[test]
fn bindgen_test_layout_fio_option() {
    assert_eq!(
        ::std::mem::size_of::<fio_option>(),
        1512usize,
        concat!("Size of: ", stringify!(fio_option))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_option>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_option))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).lname as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(lname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).alias as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).type_ as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).off1 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).off2 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).off3 as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).off4 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).off5 as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).off6 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(off6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).maxval as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(maxval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).minval as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(minval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).maxfp as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(maxfp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).minfp as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(minfp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).interval as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).maxlen as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).neg as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(neg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).prio as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).cb as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).help as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).def as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(def)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).posval as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(posval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).parent as *const _ as usize
        },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).hide as *const _ as usize
        },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(hide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).hide_on_set as *const _
                as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(hide_on_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).inverse as *const _ as usize
        },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(inverse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).inv_opt as *const _ as usize
        },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(inv_opt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).verify as *const _ as usize
        },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).prof_name as *const _
                as usize
        },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(prof_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).prof_opts as *const _
                as usize
        },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(prof_opts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).category as *const _ as usize
        },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).group as *const _ as usize
        },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).gui_data as *const _ as usize
        },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(gui_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).is_seconds as *const _
                as usize
        },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(is_seconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).is_time as *const _ as usize
        },
        1492usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(is_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).no_warn_def as *const _
                as usize
        },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(no_warn_def)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).pow2 as *const _ as usize
        },
        1500usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(pow2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fio_option>())).no_free as *const _ as usize
        },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(fio_option),
            "::",
            stringify!(no_free)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fio_rb_node {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_fio_rb_node() {
    assert_eq!(
        ::std::mem::size_of::<fio_rb_node>(),
        24usize,
        concat!("Size of: ", stringify!(fio_rb_node))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_rb_node>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_rb_node))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub _bindgen_opaque_blob: u64,
}
#[test]
fn bindgen_test_layout_rb_root() {
    assert_eq!(
        ::std::mem::size_of::<rb_root>(),
        8usize,
        concat!("Size of: ", stringify!(rb_root))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_root>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_root))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct workqueue_work {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_workqueue_work() {
    assert_eq!(
        ::std::mem::size_of::<workqueue_work>(),
        16usize,
        concat!("Size of: ", stringify!(workqueue_work))
    );
    assert_eq!(
        ::std::mem::align_of::<workqueue_work>(),
        8usize,
        concat!("Alignment of ", stringify!(workqueue_work))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct workqueue {
    pub _bindgen_opaque_blob: [u64; 18usize],
}
#[test]
fn bindgen_test_layout_workqueue() {
    assert_eq!(
        ::std::mem::size_of::<workqueue>(),
        144usize,
        concat!("Size of: ", stringify!(workqueue))
    );
    assert_eq!(
        ::std::mem::align_of::<workqueue>(),
        8usize,
        concat!("Alignment of ", stringify!(workqueue))
    );
}
#[repr(C)]
pub struct io_u {
    pub start_time:       timespec,
    pub issue_time:       timespec,
    pub file:             *mut fio_file,
    pub flags:            libc::c_uint,
    pub ddir:             fio_ddir,
    pub acct_ddir:        fio_ddir,
    pub numberio:         libc::c_ushort,
    pub ioprio:           libc::c_ushort,
    pub clat_prio_index:  libc::c_ushort,
    pub buflen:           libc::c_ulonglong,
    pub offset:           libc::c_ulonglong,
    pub verify_offset:    libc::c_ulonglong,
    pub buf:              *mut libc::c_void,
    pub rand_seed:        u64,
    pub xfer_buf:         *mut libc::c_void,
    pub xfer_buflen:      libc::c_ulonglong,
    pub buf_filled_len:   libc::c_ulonglong,
    pub ipo:              *mut io_piece,
    pub resid:            libc::c_ulonglong,
    pub error:            libc::c_uint,
    pub __bindgen_anon_1: io_u__bindgen_ty_1,
    pub __bindgen_anon_2: io_u__bindgen_ty_2,
    pub zbd_queue_io: ::std::option::Option<
        unsafe extern "C" fn(
            td: *mut thread_data,
            arg1: *mut io_u,
            q: libc::c_int,
            success: bool,
        ),
    >,
    pub zbd_put_io: ::std::option::Option<
        unsafe extern "C" fn(td: *mut thread_data, arg1: *const io_u),
    >,
    pub end_io: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut *mut io_u,
        ) -> libc::c_int,
    >,
    pub __bindgen_anon_3: io_u__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_1 {
    pub index:       libc::c_uint,
    pub seen:        libc::c_uint,
    pub engine_data: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_io_u__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<io_u__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io_u__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_1>())).index as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_1),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_1>())).seen as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_1),
            "::",
            stringify!(seen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_1>())).engine_data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_1),
            "::",
            stringify!(engine_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_2 {
    pub verify_list: flist_head,
    pub work:        workqueue_work,
}
#[test]
fn bindgen_test_layout_io_u__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<io_u__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(io_u__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_2>())).verify_list
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_2),
            "::",
            stringify!(verify_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_2>())).work as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_2),
            "::",
            stringify!(work)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_3 {
    pub aiocb:     os_aiocb_t,
    pub mr:        *mut ibv_mr,
    pub mmap_data: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout_io_u__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<io_u__bindgen_ty_3>(),
        160usize,
        concat!("Size of: ", stringify!(io_u__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_3>())).aiocb as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_3),
            "::",
            stringify!(aiocb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_3>())).mr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_3),
            "::",
            stringify!(mr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u__bindgen_ty_3>())).mmap_data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u__bindgen_ty_3),
            "::",
            stringify!(mmap_data)
        )
    );
}
#[test]
fn bindgen_test_layout_io_u() {
    assert_eq!(
        ::std::mem::size_of::<io_u>(),
        360usize,
        concat!("Size of: ", stringify!(io_u))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).start_time as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(start_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).issue_time as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(issue_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).file as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).ddir as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(ddir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).acct_ddir as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(acct_ddir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).numberio as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(numberio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).ioprio as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(ioprio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).clat_prio_index as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(clat_prio_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).buflen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).offset as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).verify_offset as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(verify_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).buf as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(io_u), "::", stringify!(buf))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).rand_seed as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(rand_seed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).xfer_buf as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(xfer_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).xfer_buflen as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(xfer_buflen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).buf_filled_len as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(buf_filled_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).ipo as *const _ as usize },
        128usize,
        concat!("Offset of field: ", stringify!(io_u), "::", stringify!(ipo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).resid as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(resid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).error as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).zbd_queue_io as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(zbd_queue_io)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_u>())).zbd_put_io as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(zbd_put_io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io_u>())).end_io as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(io_u),
            "::",
            stringify!(end_io)
        )
    );
}
pub const zbd_zoned_model_ZBD_NONE: zbd_zoned_model = 1;
pub const zbd_zoned_model_ZBD_HOST_AWARE: zbd_zoned_model = 2;
pub const zbd_zoned_model_ZBD_HOST_MANAGED: zbd_zoned_model = 3;
pub type zbd_zoned_model = libc::c_uint;
pub const zbd_zone_type_ZBD_ZONE_TYPE_CNV: zbd_zone_type = 1;
pub const zbd_zone_type_ZBD_ZONE_TYPE_SWR: zbd_zone_type = 2;
pub const zbd_zone_type_ZBD_ZONE_TYPE_SWP: zbd_zone_type = 3;
pub type zbd_zone_type = libc::c_uint;
pub const zbd_zone_cond_ZBD_ZONE_COND_NOT_WP: zbd_zone_cond = 0;
pub const zbd_zone_cond_ZBD_ZONE_COND_EMPTY: zbd_zone_cond = 1;
pub const zbd_zone_cond_ZBD_ZONE_COND_IMP_OPEN: zbd_zone_cond = 2;
pub const zbd_zone_cond_ZBD_ZONE_COND_EXP_OPEN: zbd_zone_cond = 3;
pub const zbd_zone_cond_ZBD_ZONE_COND_CLOSED: zbd_zone_cond = 4;
pub const zbd_zone_cond_ZBD_ZONE_COND_READONLY: zbd_zone_cond = 13;
pub const zbd_zone_cond_ZBD_ZONE_COND_FULL: zbd_zone_cond = 14;
pub const zbd_zone_cond_ZBD_ZONE_COND_OFFLINE: zbd_zone_cond = 15;
pub type zbd_zone_cond = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zbd_zone {
    pub start:    u64,
    pub wp:       u64,
    pub len:      u64,
    pub capacity: u64,
    pub type_:    zbd_zone_type,
    pub cond:     zbd_zone_cond,
}
#[test]
fn bindgen_test_layout_zbd_zone() {
    assert_eq!(
        ::std::mem::size_of::<zbd_zone>(),
        40usize,
        concat!("Size of: ", stringify!(zbd_zone))
    );
    assert_eq!(
        ::std::mem::align_of::<zbd_zone>(),
        8usize,
        concat!("Alignment of ", stringify!(zbd_zone))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zbd_zone>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zbd_zone>())).wp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zbd_zone>())).len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zbd_zone>())).capacity as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zbd_zone>())).type_ as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<zbd_zone>())).cond as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(zbd_zone),
            "::",
            stringify!(cond)
        )
    );
}
pub const fio_q_status_FIO_Q_COMPLETED: fio_q_status = 0;
pub const fio_q_status_FIO_Q_QUEUED: fio_q_status = 1;
pub const fio_q_status_FIO_Q_BUSY: fio_q_status = 2;
pub type fio_q_status = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ioengine_ops {
    pub list:               flist_head,
    pub name:               *const libc::c_char,
    pub version:            libc::c_int,
    pub flags:              libc::c_int,
    pub dlhandle:           *mut libc::c_void,
    pub setup: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub post_init: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub prep: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> libc::c_int,
    >,
    pub queue: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> fio_q_status,
    >,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int,
    >,
    pub getevents: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: libc::c_uint,
            arg3: libc::c_uint,
            arg4: *const timespec,
        ) -> libc::c_int,
    >,
    pub event: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: libc::c_int,
        ) -> *mut io_u,
    >,
    pub errdetails: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut io_u) -> *mut libc::c_char,
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> libc::c_int,
    >,
    pub cleanup:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub open_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub close_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub unlink_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub get_file_size: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub prepopulate_file: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
        ) -> libc::c_int,
    >,
    pub terminate:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub iomem_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: size_t,
        ) -> libc::c_int,
    >,
    pub iomem_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub io_u_init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut io_u,
        ) -> libc::c_int,
    >,
    pub io_u_free: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut io_u),
    >,
    pub get_zoned_model: ::std::option::Option<
        unsafe extern "C" fn(
            td: *mut thread_data,
            f: *mut fio_file,
            arg1: *mut zbd_zoned_model,
        ) -> libc::c_int,
    >,
    pub report_zones: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: u64,
            arg4: *mut zbd_zone,
            arg5: libc::c_uint,
        ) -> libc::c_int,
    >,
    pub reset_wp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: u64,
            arg4: u64,
        ) -> libc::c_int,
    >,
    pub get_max_open_zones: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: *mut fio_file,
            arg3: *mut libc::c_uint,
        ) -> libc::c_int,
    >,
    pub option_struct_size: libc::c_int,
    pub options:            *mut fio_option,
}
#[test]
fn bindgen_test_layout_ioengine_ops() {
    assert_eq!(
        ::std::mem::size_of::<ioengine_ops>(),
        264usize,
        concat!("Size of: ", stringify!(ioengine_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<ioengine_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(ioengine_ops))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).list as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).version as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).flags as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).dlhandle as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(dlhandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).setup as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).init as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).post_init as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(post_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).prep as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(prep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).queue as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).commit as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(commit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).getevents as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(getevents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).event as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).errdetails as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(errdetails)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).cancel as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).cleanup as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(cleanup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).open_file as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(open_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).close_file as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(close_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).invalidate as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).unlink_file as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(unlink_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).get_file_size as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(get_file_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).prepopulate_file
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(prepopulate_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).terminate as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(terminate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).iomem_alloc as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(iomem_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).iomem_free as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(iomem_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).io_u_init as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(io_u_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).io_u_free as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(io_u_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).get_zoned_model as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(get_zoned_model)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).report_zones as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(report_zones)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).reset_wp as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(reset_wp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).get_max_open_zones
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(get_max_open_zones)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).option_struct_size
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(option_struct_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ioengine_ops>())).options as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ioengine_ops),
            "::",
            stringify!(options)
        )
    );
}
pub const fio_ioengine_flags_FIO_SYNCIO: fio_ioengine_flags = 1;
pub const fio_ioengine_flags_FIO_RAWIO: fio_ioengine_flags = 2;
pub const fio_ioengine_flags_FIO_DISKLESSIO: fio_ioengine_flags = 4;
pub const fio_ioengine_flags_FIO_NOEXTEND: fio_ioengine_flags = 8;
pub const fio_ioengine_flags_FIO_NODISKUTIL: fio_ioengine_flags = 16;
pub const fio_ioengine_flags_FIO_UNIDIR: fio_ioengine_flags = 32;
pub const fio_ioengine_flags_FIO_NOIO: fio_ioengine_flags = 64;
pub const fio_ioengine_flags_FIO_PIPEIO: fio_ioengine_flags = 128;
pub const fio_ioengine_flags_FIO_BARRIER: fio_ioengine_flags = 256;
pub const fio_ioengine_flags_FIO_MEMALIGN: fio_ioengine_flags = 512;
pub const fio_ioengine_flags_FIO_BIT_BASED: fio_ioengine_flags = 1024;
pub const fio_ioengine_flags_FIO_FAKEIO: fio_ioengine_flags = 2048;
pub const fio_ioengine_flags_FIO_NOSTATS: fio_ioengine_flags = 4096;
pub const fio_ioengine_flags_FIO_NOFILEHASH: fio_ioengine_flags = 8192;
pub const fio_ioengine_flags_FIO_ASYNCIO_SYNC_TRIM: fio_ioengine_flags = 16384;
pub const fio_ioengine_flags_FIO_NO_OFFLOAD: fio_ioengine_flags = 32768;
pub type fio_ioengine_flags = libc::c_uint;
#[repr(C)]
#[repr(align(8))]
pub struct io_log {
    pub _bindgen_opaque_blob: [u64; 63usize],
}
#[test]
fn bindgen_test_layout_io_log() {
    assert_eq!(
        ::std::mem::size_of::<io_log>(),
        504usize,
        concat!("Size of: ", stringify!(io_log))
    );
    assert_eq!(
        ::std::mem::align_of::<io_log>(),
        8usize,
        concat!("Alignment of ", stringify!(io_log))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct io_piece {
    pub _bindgen_opaque_blob: [u64; 11usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_1 {
    pub rb_node: fio_rb_node,
    pub list:    flist_head,
}
#[test]
fn bindgen_test_layout_io_piece__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<io_piece__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(io_piece__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io_piece__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_piece__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_piece__bindgen_ty_1>())).rb_node
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_1),
            "::",
            stringify!(rb_node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_piece__bindgen_ty_1>())).list as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_1),
            "::",
            stringify!(list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_2 {
    pub fileno: libc::c_int,
    pub file:   *mut fio_file,
}
#[test]
fn bindgen_test_layout_io_piece__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<io_piece__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(io_piece__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<io_piece__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_piece__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_piece__bindgen_ty_2>())).fileno
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_2),
            "::",
            stringify!(fileno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_piece__bindgen_ty_2>())).file as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_2),
            "::",
            stringify!(file)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_3 {
    pub delay:       libc::c_ulong,
    pub file_action: libc::c_uint,
}
#[test]
fn bindgen_test_layout_io_piece__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<io_piece__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(io_piece__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<io_piece__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(io_piece__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_piece__bindgen_ty_3>())).delay as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_3),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<io_piece__bindgen_ty_3>())).file_action
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_piece__bindgen_ty_3),
            "::",
            stringify!(file_action)
        )
    );
}
#[test]
fn bindgen_test_layout_io_piece() {
    assert_eq!(
        ::std::mem::size_of::<io_piece>(),
        88usize,
        concat!("Size of: ", stringify!(io_piece))
    );
    assert_eq!(
        ::std::mem::align_of::<io_piece>(),
        8usize,
        concat!("Alignment of ", stringify!(io_piece))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct fio_sem {
    pub _bindgen_opaque_blob: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_fio_sem() {
    assert_eq!(
        ::std::mem::size_of::<fio_sem>(),
        32usize,
        concat!("Size of: ", stringify!(fio_sem))
    );
    assert_eq!(
        ::std::mem::align_of::<fio_sem>(),
        8usize,
        concat!("Alignment of ", stringify!(fio_sem))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct disk_util {
    pub _bindgen_opaque_blob: [u64; 191usize],
}
#[test]
fn bindgen_test_layout_disk_util() {
    assert_eq!(
        ::std::mem::size_of::<disk_util>(),
        1528usize,
        concat!("Size of: ", stringify!(disk_util))
    );
    assert_eq!(
        ::std::mem::align_of::<disk_util>(),
        8usize,
        concat!("Alignment of ", stringify!(disk_util))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct clat_prio_stat {
    pub _bindgen_opaque_blob: [u64; 1864usize],
}
#[test]
fn bindgen_test_layout_clat_prio_stat() {
    assert_eq!(
        ::std::mem::size_of::<clat_prio_stat>(),
        14912usize,
        concat!("Size of: ", stringify!(clat_prio_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<clat_prio_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(clat_prio_stat))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct thread_stat {
    pub _bindgen_opaque_blob: [u64; 22986usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_1 {
    pub continue_on_error: u16,
    pub pad2:              u32,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_1>()))
                .continue_on_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_1),
            "::",
            stringify!(continue_on_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_1>())).pad2
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_1),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_2 {
    pub ss_iops_data:        *mut u64,
    pub ss_iops_data_offset: u64,
    pub pad4:                u64,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_2>())).ss_iops_data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_2),
            "::",
            stringify!(ss_iops_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_2>()))
                .ss_iops_data_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_2),
            "::",
            stringify!(ss_iops_data_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_2>())).pad4
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_2),
            "::",
            stringify!(pad4)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_3 {
    pub ss_bw_data:        *mut u64,
    pub ss_bw_data_offset: u64,
    pub pad5:              u64,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_3>())).ss_bw_data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_3),
            "::",
            stringify!(ss_bw_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_3>()))
                .ss_bw_data_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_3),
            "::",
            stringify!(ss_bw_data_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_3>())).pad5
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_3),
            "::",
            stringify!(pad5)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_4 {
    pub clat_prio:        [*mut clat_prio_stat; 3usize],
    pub clat_prio_offset: [u64; 3usize],
    pub pad6:             u64,
}
#[test]
fn bindgen_test_layout_thread_stat__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<thread_stat__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(thread_stat__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_4>())).clat_prio
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_4),
            "::",
            stringify!(clat_prio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_4>()))
                .clat_prio_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_4),
            "::",
            stringify!(clat_prio_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_stat__bindgen_ty_4>())).pad6
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_stat__bindgen_ty_4),
            "::",
            stringify!(pad6)
        )
    );
}
#[test]
fn bindgen_test_layout_thread_stat() {
    assert_eq!(
        ::std::mem::size_of::<thread_stat>(),
        183888usize,
        concat!("Size of: ", stringify!(thread_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_stat))
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct thread_options {
    pub _bindgen_opaque_blob: [u64; 488usize],
}
#[test]
fn bindgen_test_layout_thread_options() {
    assert_eq!(
        ::std::mem::size_of::<thread_options>(),
        3904usize,
        concat!("Size of: ", stringify!(thread_options))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_options>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_options))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct prof_io_ops {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_prof_io_ops() {
    assert_eq!(
        ::std::mem::size_of::<prof_io_ops>(),
        24usize,
        concat!("Size of: ", stringify!(prof_io_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<prof_io_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(prof_io_ops))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct io_u_queue {
    pub _bindgen_opaque_blob: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_io_u_queue() {
    assert_eq!(
        ::std::mem::size_of::<io_u_queue>(),
        16usize,
        concat!("Size of: ", stringify!(io_u_queue))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u_queue>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u_queue))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct io_u_ring {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_io_u_ring() {
    assert_eq!(
        ::std::mem::size_of::<io_u_ring>(),
        24usize,
        concat!("Size of: ", stringify!(io_u_ring))
    );
    assert_eq!(
        ::std::mem::align_of::<io_u_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(io_u_ring))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct steadystate_data {
    pub _bindgen_opaque_blob: [u64; 19usize],
}
#[test]
fn bindgen_test_layout_steadystate_data() {
    assert_eq!(
        ::std::mem::size_of::<steadystate_data>(),
        152usize,
        concat!("Size of: ", stringify!(steadystate_data))
    );
    assert_eq!(
        ::std::mem::align_of::<steadystate_data>(),
        8usize,
        concat!("Alignment of ", stringify!(steadystate_data))
    );
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct zone_split_index {
    pub _bindgen_opaque_blob: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_zone_split_index() {
    assert_eq!(
        ::std::mem::size_of::<zone_split_index>(),
        24usize,
        concat!("Size of: ", stringify!(zone_split_index))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_split_index>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_split_index))
    );
}
#[repr(C)]
pub struct thread_data {
    pub opt_list: flist_head,
    pub flags: libc::c_ulonglong,
    pub o: thread_options,
    pub eo: *mut libc::c_void,
    pub thread: pthread_t,
    pub thread_number: libc::c_uint,
    pub subjob_number: libc::c_uint,
    pub groupid: libc::c_uint,
    pub ts: thread_stat,
    pub client_type: libc::c_int,
    pub slat_log: *mut io_log,
    pub clat_log: *mut io_log,
    pub clat_hist_log: *mut io_log,
    pub lat_log: *mut io_log,
    pub bw_log: *mut io_log,
    pub iops_log: *mut io_log,
    pub log_compress_wq: workqueue,
    pub parent: *mut thread_data,
    pub stat_io_bytes: [u64; 3usize],
    pub bw_sample_time: timespec,
    pub stat_io_blocks: [u64; 3usize],
    pub iops_sample_time: timespec,
    pub update_rusage: libc::c_int,
    pub rusage_sem: *mut fio_sem,
    pub ru_start: rusage,
    pub ru_end: rusage,
    pub files: *mut *mut fio_file,
    pub file_locks: *mut libc::c_uchar,
    pub files_size: libc::c_uint,
    pub files_index: libc::c_uint,
    pub nr_open_files: libc::c_uint,
    pub nr_done_files: libc::c_uint,
    pub __bindgen_anon_1: thread_data__bindgen_ty_1,
    pub __bindgen_anon_2: thread_data__bindgen_ty_2,
    pub __bindgen_anon_3: thread_data__bindgen_ty_3,
    pub random_center: f64,
    pub error: libc::c_int,
    pub sig: libc::c_int,
    pub done: libc::c_int,
    pub stop_io: libc::c_int,
    pub pid: pid_t,
    pub orig_buffer: *mut libc::c_char,
    pub orig_buffer_size: size_t,
    pub runstate: libc::c_int,
    pub terminate: bool,
    pub last_was_sync: bool,
    pub last_ddir: fio_ddir,
    pub mmapfd: libc::c_int,
    pub iolog_buf: *mut libc::c_void,
    pub iolog_f: *mut FILE,
    pub rand_seeds: [u64; 21usize],
    pub bsrange_state: [frand_state; 3usize],
    pub verify_state: frand_state,
    pub trim_state: frand_state,
    pub delay_state: frand_state,
    pub buf_state: frand_state,
    pub buf_state_prev: frand_state,
    pub buf_state_ret: frand_state,
    pub dedupe_state: frand_state,
    pub zone_state: frand_state,
    pub prio_state: frand_state,
    pub dedupe_working_set_index_state: frand_state,
    pub dedupe_working_set_states: *mut frand_state,
    pub num_unique_pages: libc::c_ulonglong,
    pub zone_state_index: *mut *mut zone_split_index,
    pub num_open_zones: libc::c_uint,
    pub verify_batch: libc::c_uint,
    pub trim_batch: libc::c_uint,
    pub vstate: *mut thread_io_list,
    pub shm_id: libc::c_int,
    pub ioprio: libc::c_uint,
    pub io_ops: *mut ioengine_ops,
    pub io_ops_init: libc::c_int,
    pub io_ops_data: *mut libc::c_void,
    pub cur_depth: libc::c_uint,
    pub io_u_queued: libc::c_uint,
    pub io_u_in_flight: libc::c_uint,
    pub io_u_requeues: io_u_ring,
    pub io_u_freelist: io_u_queue,
    pub io_u_all: io_u_queue,
    pub io_u_lock: pthread_mutex_t,
    pub free_cond: pthread_cond_t,
    pub verify_list: flist_head,
    pub verify_threads: *mut pthread_t,
    pub nr_verify_threads: libc::c_uint,
    pub verify_cond: pthread_cond_t,
    pub verify_thread_exit: libc::c_int,
    pub rate_bps: [u64; 3usize],
    pub rate_next_io_time: [u64; 3usize],
    pub last_rate_check_bytes: [libc::c_ulonglong; 3usize],
    pub last_rate_check_blocks: [libc::c_ulong; 3usize],
    pub rate_io_issue_bytes: [libc::c_ulonglong; 3usize],
    pub last_rate_check_time: [timespec; 3usize],
    pub last_usec: [i64; 3usize],
    pub poisson_state: [frand_state; 3usize],
    pub io_wq: workqueue,
    pub total_io_size: u64,
    pub fill_device_size: u64,
    pub io_issues: [u64; 3usize],
    pub io_issue_bytes: [u64; 3usize],
    pub loops: u64,
    pub io_blocks: [u64; 3usize],
    pub this_io_blocks: [u64; 3usize],
    pub io_bytes: [u64; 3usize],
    pub this_io_bytes: [u64; 3usize],
    pub io_skip_bytes: u64,
    pub zone_bytes: u64,
    pub sem: *mut fio_sem,
    pub bytes_done: [u64; 3usize],
    pub thinktime_blocks_counter: *mut u64,
    pub last_thinktime: timespec,
    pub last_thinktime_blocks: u64,
    pub random_state: frand_state,
    pub start: timespec,
    pub epoch: timespec,
    pub alternate_epoch: libc::c_ulonglong,
    pub last_issue: timespec,
    pub time_offset: libc::c_long,
    pub ts_cache: timespec,
    pub terminate_time: timespec,
    pub ts_cache_nr: libc::c_uint,
    pub ts_cache_mask: libc::c_uint,
    pub ramp_time_over: bool,
    pub latency_ts: timespec,
    pub latency_qd: libc::c_uint,
    pub latency_qd_high: libc::c_uint,
    pub latency_qd_low: libc::c_uint,
    pub latency_failed: libc::c_uint,
    pub latency_stable_count: libc::c_uint,
    pub latency_ios: u64,
    pub latency_end_run: libc::c_int,
    pub rwmix_state: frand_state,
    pub rwmix_issues: libc::c_ulong,
    pub rwmix_ddir: fio_ddir,
    pub ddir_seq_nr: libc::c_uint,
    pub seq_rand_state: [frand_state; 3usize],
    pub io_hist_tree: rb_root,
    pub io_hist_list: flist_head,
    pub io_hist_len: libc::c_ulong,
    pub io_log_list: flist_head,
    pub io_log_rfile: *mut FILE,
    pub io_log_blktrace: libc::c_uint,
    pub io_log_blktrace_swap: libc::c_uint,
    pub io_log_blktrace_last_ttime: libc::c_ulonglong,
    pub io_log_current: libc::c_uint,
    pub io_log_checkmark: libc::c_uint,
    pub io_log_highmark: libc::c_uint,
    pub io_log_highmark_time: timespec,
    pub trim_list: flist_head,
    pub trim_entries: libc::c_ulong,
    pub file_service_nr: libc::c_uint,
    pub file_service_left: libc::c_uint,
    pub file_service_file: *mut fio_file,
    pub sync_file_range_nr: libc::c_uint,
    pub file_size_state: frand_state,
    pub total_err_count: libc::c_uint,
    pub first_error: libc::c_int,
    pub flow: *mut fio_flow,
    pub flow_counter: libc::c_ulonglong,
    pub prof_io_ops: prof_io_ops,
    pub prof_data: *mut libc::c_void,
    pub pinned_mem: *mut libc::c_void,
    pub ss: steadystate_data,
    pub verror: [libc::c_char; 128usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_1 {
    pub next_file:       libc::c_uint,
    pub next_file_state: frand_state,
}
#[test]
fn bindgen_test_layout_thread_data__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<thread_data__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(thread_data__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data__bindgen_ty_1>())).next_file
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_1),
            "::",
            stringify!(next_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data__bindgen_ty_1>()))
                .next_file_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_1),
            "::",
            stringify!(next_file_state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_2 {
    pub next_file_zipf:  zipf_state,
    pub next_file_gauss: gauss_state,
}
#[test]
fn bindgen_test_layout_thread_data__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<thread_data__bindgen_ty_2>(),
        104usize,
        concat!("Size of: ", stringify!(thread_data__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data__bindgen_ty_2>())).next_file_zipf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_2),
            "::",
            stringify!(next_file_zipf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data__bindgen_ty_2>()))
                .next_file_gauss as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_2),
            "::",
            stringify!(next_file_gauss)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_3 {
    pub zipf_theta: f64,
    pub pareto_h:   f64,
    pub gauss_dev:  f64,
}
#[test]
fn bindgen_test_layout_thread_data__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<thread_data__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(thread_data__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data__bindgen_ty_3>())).zipf_theta
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_3),
            "::",
            stringify!(zipf_theta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data__bindgen_ty_3>())).pareto_h
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_3),
            "::",
            stringify!(pareto_h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data__bindgen_ty_3>())).gauss_dev
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data__bindgen_ty_3),
            "::",
            stringify!(gauss_dev)
        )
    );
}
#[test]
fn bindgen_test_layout_thread_data() {
    assert_eq!(
        ::std::mem::size_of::<thread_data>(),
        191416usize,
        concat!("Size of: ", stringify!(thread_data))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_data>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).opt_list as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(opt_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).o as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).eo as *const _ as usize
        },
        3928usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(eo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).thread as *const _ as usize
        },
        3936usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).thread_number as *const _
                as usize
        },
        3944usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(thread_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).subjob_number as *const _
                as usize
        },
        3948usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(subjob_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).groupid as *const _ as usize
        },
        3952usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(groupid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ts as *const _ as usize
        },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).client_type as *const _
                as usize
        },
        187848usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(client_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).slat_log as *const _
                as usize
        },
        187856usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(slat_log)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).clat_log as *const _
                as usize
        },
        187864usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(clat_log)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).clat_hist_log as *const _
                as usize
        },
        187872usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(clat_hist_log)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).lat_log as *const _ as usize
        },
        187880usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(lat_log)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).bw_log as *const _ as usize
        },
        187888usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bw_log)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).iops_log as *const _
                as usize
        },
        187896usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iops_log)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).log_compress_wq as *const _
                as usize
        },
        187904usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(log_compress_wq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).parent as *const _ as usize
        },
        188048usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).stat_io_bytes as *const _
                as usize
        },
        188056usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(stat_io_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).bw_sample_time as *const _
                as usize
        },
        188080usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bw_sample_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).stat_io_blocks as *const _
                as usize
        },
        188096usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(stat_io_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).iops_sample_time as *const _
                as usize
        },
        188120usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iops_sample_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).update_rusage as *const _
                as usize
        },
        188136usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(update_rusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rusage_sem as *const _
                as usize
        },
        188144usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rusage_sem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ru_start as *const _
                as usize
        },
        188152usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ru_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ru_end as *const _ as usize
        },
        188296usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ru_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).files as *const _ as usize
        },
        188440usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).file_locks as *const _
                as usize
        },
        188448usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_locks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).files_size as *const _
                as usize
        },
        188456usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(files_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).files_index as *const _
                as usize
        },
        188460usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(files_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).nr_open_files as *const _
                as usize
        },
        188464usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(nr_open_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).nr_done_files as *const _
                as usize
        },
        188468usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(nr_done_files)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).random_center as *const _
                as usize
        },
        188632usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(random_center)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).error as *const _ as usize
        },
        188640usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).sig as *const _ as usize
        },
        188644usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).done as *const _ as usize
        },
        188648usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).stop_io as *const _ as usize
        },
        188652usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(stop_io)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).pid as *const _ as usize
        },
        188656usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).orig_buffer as *const _
                as usize
        },
        188664usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(orig_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).orig_buffer_size as *const _
                as usize
        },
        188672usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(orig_buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).runstate as *const _
                as usize
        },
        188680usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(runstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).terminate as *const _
                as usize
        },
        188684usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(terminate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_was_sync as *const _
                as usize
        },
        188685usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_was_sync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_ddir as *const _
                as usize
        },
        188688usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_ddir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).mmapfd as *const _ as usize
        },
        188692usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(mmapfd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).iolog_buf as *const _
                as usize
        },
        188696usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iolog_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).iolog_f as *const _ as usize
        },
        188704usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(iolog_f)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rand_seeds as *const _
                as usize
        },
        188712usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rand_seeds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).bsrange_state as *const _
                as usize
        },
        188880usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bsrange_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).verify_state as *const _
                as usize
        },
        189024usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).trim_state as *const _
                as usize
        },
        189072usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).delay_state as *const _
                as usize
        },
        189120usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(delay_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).buf_state as *const _
                as usize
        },
        189168usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(buf_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).buf_state_prev as *const _
                as usize
        },
        189216usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(buf_state_prev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).buf_state_ret as *const _
                as usize
        },
        189264usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(buf_state_ret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).dedupe_state as *const _
                as usize
        },
        189312usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(dedupe_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).zone_state as *const _
                as usize
        },
        189360usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(zone_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).prio_state as *const _
                as usize
        },
        189408usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(prio_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>()))
                .dedupe_working_set_index_state as *const _ as usize
        },
        189456usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(dedupe_working_set_index_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).dedupe_working_set_states
                as *const _ as usize
        },
        189504usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(dedupe_working_set_states)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).num_unique_pages as *const _
                as usize
        },
        189512usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(num_unique_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).zone_state_index as *const _
                as usize
        },
        189520usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(zone_state_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).num_open_zones as *const _
                as usize
        },
        189528usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(num_open_zones)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).verify_batch as *const _
                as usize
        },
        189532usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_batch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).trim_batch as *const _
                as usize
        },
        189536usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_batch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).vstate as *const _ as usize
        },
        189544usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(vstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).shm_id as *const _ as usize
        },
        189552usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(shm_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ioprio as *const _ as usize
        },
        189556usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ioprio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_ops as *const _ as usize
        },
        189560usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_ops)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_ops_init as *const _
                as usize
        },
        189568usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_ops_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_ops_data as *const _
                as usize
        },
        189576usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_ops_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).cur_depth as *const _
                as usize
        },
        189584usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(cur_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_u_queued as *const _
                as usize
        },
        189588usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_u_in_flight as *const _
                as usize
        },
        189592usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_in_flight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_u_requeues as *const _
                as usize
        },
        189600usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_requeues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_u_freelist as *const _
                as usize
        },
        189624usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_freelist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_u_all as *const _
                as usize
        },
        189640usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_all)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_u_lock as *const _
                as usize
        },
        189656usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_u_lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).free_cond as *const _
                as usize
        },
        189664usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(free_cond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).verify_list as *const _
                as usize
        },
        189672usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).verify_threads as *const _
                as usize
        },
        189688usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).nr_verify_threads
                as *const _ as usize
        },
        189696usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(nr_verify_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).verify_cond as *const _
                as usize
        },
        189704usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_cond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).verify_thread_exit
                as *const _ as usize
        },
        189712usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verify_thread_exit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rate_bps as *const _
                as usize
        },
        189720usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rate_bps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rate_next_io_time
                as *const _ as usize
        },
        189744usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rate_next_io_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_rate_check_bytes
                as *const _ as usize
        },
        189768usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_rate_check_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_rate_check_blocks
                as *const _ as usize
        },
        189792usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_rate_check_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rate_io_issue_bytes
                as *const _ as usize
        },
        189816usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rate_io_issue_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_rate_check_time
                as *const _ as usize
        },
        189840usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_rate_check_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_usec as *const _
                as usize
        },
        189888usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_usec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).poisson_state as *const _
                as usize
        },
        189912usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(poisson_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_wq as *const _ as usize
        },
        190056usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_wq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).total_io_size as *const _
                as usize
        },
        190200usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(total_io_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).fill_device_size as *const _
                as usize
        },
        190208usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(fill_device_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_issues as *const _
                as usize
        },
        190216usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_issues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_issue_bytes as *const _
                as usize
        },
        190240usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_issue_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).loops as *const _ as usize
        },
        190264usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(loops)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_blocks as *const _
                as usize
        },
        190272usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).this_io_blocks as *const _
                as usize
        },
        190296usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(this_io_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_bytes as *const _
                as usize
        },
        190320usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).this_io_bytes as *const _
                as usize
        },
        190344usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(this_io_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_skip_bytes as *const _
                as usize
        },
        190368usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_skip_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).zone_bytes as *const _
                as usize
        },
        190376usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(zone_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).sem as *const _ as usize
        },
        190384usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(sem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).bytes_done as *const _
                as usize
        },
        190392usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(bytes_done)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).thinktime_blocks_counter
                as *const _ as usize
        },
        190416usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(thinktime_blocks_counter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_thinktime as *const _
                as usize
        },
        190424usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_thinktime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_thinktime_blocks
                as *const _ as usize
        },
        190440usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_thinktime_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).random_state as *const _
                as usize
        },
        190448usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(random_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).start as *const _ as usize
        },
        190496usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).epoch as *const _ as usize
        },
        190512usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(epoch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).alternate_epoch as *const _
                as usize
        },
        190528usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(alternate_epoch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).last_issue as *const _
                as usize
        },
        190536usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(last_issue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).time_offset as *const _
                as usize
        },
        190552usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(time_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ts_cache as *const _
                as usize
        },
        190560usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).terminate_time as *const _
                as usize
        },
        190576usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(terminate_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ts_cache_nr as *const _
                as usize
        },
        190592usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts_cache_nr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ts_cache_mask as *const _
                as usize
        },
        190596usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ts_cache_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ramp_time_over as *const _
                as usize
        },
        190600usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ramp_time_over)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_ts as *const _
                as usize
        },
        190608usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_ts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_qd as *const _
                as usize
        },
        190624usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_qd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_qd_high as *const _
                as usize
        },
        190628usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_qd_high)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_qd_low as *const _
                as usize
        },
        190632usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_qd_low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_failed as *const _
                as usize
        },
        190636usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_failed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_stable_count
                as *const _ as usize
        },
        190640usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_stable_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_ios as *const _
                as usize
        },
        190648usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_ios)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).latency_end_run as *const _
                as usize
        },
        190656usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(latency_end_run)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rwmix_state as *const _
                as usize
        },
        190664usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rwmix_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rwmix_issues as *const _
                as usize
        },
        190712usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rwmix_issues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).rwmix_ddir as *const _
                as usize
        },
        190720usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(rwmix_ddir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ddir_seq_nr as *const _
                as usize
        },
        190724usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ddir_seq_nr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).seq_rand_state as *const _
                as usize
        },
        190728usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(seq_rand_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_hist_tree as *const _
                as usize
        },
        190872usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_hist_tree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_hist_list as *const _
                as usize
        },
        190880usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_hist_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_hist_len as *const _
                as usize
        },
        190896usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_hist_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_list as *const _
                as usize
        },
        190904usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_rfile as *const _
                as usize
        },
        190920usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_rfile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_blktrace as *const _
                as usize
        },
        190928usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_blktrace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_blktrace_swap
                as *const _ as usize
        },
        190932usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_blktrace_swap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_blktrace_last_ttime
                as *const _ as usize
        },
        190936usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_blktrace_last_ttime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_current as *const _
                as usize
        },
        190944usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_current)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_checkmark as *const _
                as usize
        },
        190948usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_checkmark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_highmark as *const _
                as usize
        },
        190952usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_highmark)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).io_log_highmark_time
                as *const _ as usize
        },
        190960usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(io_log_highmark_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).trim_list as *const _
                as usize
        },
        190976usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).trim_entries as *const _
                as usize
        },
        190992usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(trim_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).file_service_nr as *const _
                as usize
        },
        191000usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_service_nr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).file_service_left
                as *const _ as usize
        },
        191004usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_service_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).file_service_file
                as *const _ as usize
        },
        191008usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_service_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).sync_file_range_nr
                as *const _ as usize
        },
        191016usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(sync_file_range_nr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).file_size_state as *const _
                as usize
        },
        191024usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(file_size_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).total_err_count as *const _
                as usize
        },
        191072usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(total_err_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).first_error as *const _
                as usize
        },
        191076usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(first_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).flow as *const _ as usize
        },
        191080usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).flow_counter as *const _
                as usize
        },
        191088usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(flow_counter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).prof_io_ops as *const _
                as usize
        },
        191096usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(prof_io_ops)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).prof_data as *const _
                as usize
        },
        191120usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(prof_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).pinned_mem as *const _
                as usize
        },
        191128usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(pinned_mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).ss as *const _ as usize
        },
        191136usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<thread_data>())).verror as *const _ as usize
        },
        191288usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_data),
            "::",
            stringify!(verror)
        )
    );
}
pub const opt_category___FIO_OPT_C_GENERAL: opt_category = 0;
pub const opt_category___FIO_OPT_C_IO: opt_category = 1;
pub const opt_category___FIO_OPT_C_FILE: opt_category = 2;
pub const opt_category___FIO_OPT_C_STAT: opt_category = 3;
pub const opt_category___FIO_OPT_C_LOG: opt_category = 4;
pub const opt_category___FIO_OPT_C_PROFILE: opt_category = 5;
pub const opt_category___FIO_OPT_C_ENGINE: opt_category = 6;
pub const opt_category___FIO_OPT_C_NR: opt_category = 7;
pub const opt_category_FIO_OPT_C_GENERAL: opt_category = 1;
pub const opt_category_FIO_OPT_C_IO: opt_category = 2;
pub const opt_category_FIO_OPT_C_FILE: opt_category = 4;
pub const opt_category_FIO_OPT_C_STAT: opt_category = 8;
pub const opt_category_FIO_OPT_C_LOG: opt_category = 16;
pub const opt_category_FIO_OPT_C_PROFILE: opt_category = 32;
pub const opt_category_FIO_OPT_C_ENGINE: opt_category = 64;
pub const opt_category_FIO_OPT_C_INVALID: opt_category = 128;
pub type opt_category = libc::c_uint;
pub const opt_category_group___FIO_OPT_G_RATE: opt_category_group = 0;
pub const opt_category_group___FIO_OPT_G_ZONE: opt_category_group = 1;
pub const opt_category_group___FIO_OPT_G_RWMIX: opt_category_group = 2;
pub const opt_category_group___FIO_OPT_G_VERIFY: opt_category_group = 3;
pub const opt_category_group___FIO_OPT_G_TRIM: opt_category_group = 4;
pub const opt_category_group___FIO_OPT_G_IOLOG: opt_category_group = 5;
pub const opt_category_group___FIO_OPT_G_IO_DEPTH: opt_category_group = 6;
pub const opt_category_group___FIO_OPT_G_IO_FLOW: opt_category_group = 7;
pub const opt_category_group___FIO_OPT_G_DESC: opt_category_group = 8;
pub const opt_category_group___FIO_OPT_G_FILENAME: opt_category_group = 9;
pub const opt_category_group___FIO_OPT_G_IO_BASIC: opt_category_group = 10;
pub const opt_category_group___FIO_OPT_G_CGROUP: opt_category_group = 11;
pub const opt_category_group___FIO_OPT_G_RUNTIME: opt_category_group = 12;
pub const opt_category_group___FIO_OPT_G_PROCESS: opt_category_group = 13;
pub const opt_category_group___FIO_OPT_G_CRED: opt_category_group = 14;
pub const opt_category_group___FIO_OPT_G_CLOCK: opt_category_group = 15;
pub const opt_category_group___FIO_OPT_G_IO_TYPE: opt_category_group = 16;
pub const opt_category_group___FIO_OPT_G_THINKTIME: opt_category_group = 17;
pub const opt_category_group___FIO_OPT_G_RANDOM: opt_category_group = 18;
pub const opt_category_group___FIO_OPT_G_IO_BUF: opt_category_group = 19;
pub const opt_category_group___FIO_OPT_G_TIOBENCH: opt_category_group = 20;
pub const opt_category_group___FIO_OPT_G_ERR: opt_category_group = 21;
pub const opt_category_group___FIO_OPT_G_E4DEFRAG: opt_category_group = 22;
pub const opt_category_group___FIO_OPT_G_NETIO: opt_category_group = 23;
pub const opt_category_group___FIO_OPT_G_RDMA: opt_category_group = 24;
pub const opt_category_group___FIO_OPT_G_LIBRPMA: opt_category_group = 25;
pub const opt_category_group___FIO_OPT_G_LIBAIO: opt_category_group = 26;
pub const opt_category_group___FIO_OPT_G_ACT: opt_category_group = 27;
pub const opt_category_group___FIO_OPT_G_LATPROF: opt_category_group = 28;
pub const opt_category_group___FIO_OPT_G_RBD: opt_category_group = 29;
pub const opt_category_group___FIO_OPT_G_HTTP: opt_category_group = 30;
pub const opt_category_group___FIO_OPT_G_GFAPI: opt_category_group = 31;
pub const opt_category_group___FIO_OPT_G_MTD: opt_category_group = 32;
pub const opt_category_group___FIO_OPT_G_HDFS: opt_category_group = 33;
pub const opt_category_group___FIO_OPT_G_SG: opt_category_group = 34;
pub const opt_category_group___FIO_OPT_G_MMAP: opt_category_group = 35;
pub const opt_category_group___FIO_OPT_G_ISCSI: opt_category_group = 36;
pub const opt_category_group___FIO_OPT_G_NBD: opt_category_group = 37;
pub const opt_category_group___FIO_OPT_G_IOURING: opt_category_group = 38;
pub const opt_category_group___FIO_OPT_G_FILESTAT: opt_category_group = 39;
pub const opt_category_group___FIO_OPT_G_NR: opt_category_group = 40;
pub const opt_category_group___FIO_OPT_G_LIBCUFILE: opt_category_group = 41;
pub const opt_category_group___FIO_OPT_G_DFS: opt_category_group = 42;
pub const opt_category_group___FIO_OPT_G_NFS: opt_category_group = 43;
pub const opt_category_group___FIO_OPT_G_WINDOWSAIO: opt_category_group = 44;
pub const opt_category_group_FIO_OPT_G_RATE: opt_category_group = 1;
pub const opt_category_group_FIO_OPT_G_ZONE: opt_category_group = 2;
pub const opt_category_group_FIO_OPT_G_RWMIX: opt_category_group = 4;
pub const opt_category_group_FIO_OPT_G_VERIFY: opt_category_group = 8;
pub const opt_category_group_FIO_OPT_G_TRIM: opt_category_group = 16;
pub const opt_category_group_FIO_OPT_G_IOLOG: opt_category_group = 32;
pub const opt_category_group_FIO_OPT_G_IO_DEPTH: opt_category_group = 64;
pub const opt_category_group_FIO_OPT_G_IO_FLOW: opt_category_group = 128;
pub const opt_category_group_FIO_OPT_G_DESC: opt_category_group = 256;
pub const opt_category_group_FIO_OPT_G_FILENAME: opt_category_group = 512;
pub const opt_category_group_FIO_OPT_G_IO_BASIC: opt_category_group = 1024;
pub const opt_category_group_FIO_OPT_G_CGROUP: opt_category_group = 2048;
pub const opt_category_group_FIO_OPT_G_RUNTIME: opt_category_group = 4096;
pub const opt_category_group_FIO_OPT_G_PROCESS: opt_category_group = 8192;
pub const opt_category_group_FIO_OPT_G_CRED: opt_category_group = 16384;
pub const opt_category_group_FIO_OPT_G_CLOCK: opt_category_group = 32768;
pub const opt_category_group_FIO_OPT_G_IO_TYPE: opt_category_group = 65536;
pub const opt_category_group_FIO_OPT_G_THINKTIME: opt_category_group = 131072;
pub const opt_category_group_FIO_OPT_G_RANDOM: opt_category_group = 262144;
pub const opt_category_group_FIO_OPT_G_IO_BUF: opt_category_group = 524288;
pub const opt_category_group_FIO_OPT_G_TIOBENCH: opt_category_group = 1048576;
pub const opt_category_group_FIO_OPT_G_ERR: opt_category_group = 2097152;
pub const opt_category_group_FIO_OPT_G_E4DEFRAG: opt_category_group = 4194304;
pub const opt_category_group_FIO_OPT_G_NETIO: opt_category_group = 8388608;
pub const opt_category_group_FIO_OPT_G_RDMA: opt_category_group = 16777216;
pub const opt_category_group_FIO_OPT_G_LIBRPMA: opt_category_group = 33554432;
pub const opt_category_group_FIO_OPT_G_LIBAIO: opt_category_group = 67108864;
pub const opt_category_group_FIO_OPT_G_ACT: opt_category_group = 134217728;
pub const opt_category_group_FIO_OPT_G_LATPROF: opt_category_group = 268435456;
pub const opt_category_group_FIO_OPT_G_RBD: opt_category_group = 536870912;
pub const opt_category_group_FIO_OPT_G_HTTP: opt_category_group = 1073741824;
pub const opt_category_group_FIO_OPT_G_GFAPI: opt_category_group = 2147483648;
pub const opt_category_group_FIO_OPT_G_MTD: opt_category_group = 4294967296;
pub const opt_category_group_FIO_OPT_G_HDFS: opt_category_group = 8589934592;
pub const opt_category_group_FIO_OPT_G_SG: opt_category_group = 17179869184;
pub const opt_category_group_FIO_OPT_G_MMAP: opt_category_group = 34359738368;
pub const opt_category_group_FIO_OPT_G_INVALID: opt_category_group =
    1099511627776;
pub const opt_category_group_FIO_OPT_G_ISCSI: opt_category_group = 68719476736;
pub const opt_category_group_FIO_OPT_G_NBD: opt_category_group = 137438953472;
pub const opt_category_group_FIO_OPT_G_NFS: opt_category_group = 8796093022208;
pub const opt_category_group_FIO_OPT_G_IOURING: opt_category_group =
    274877906944;
pub const opt_category_group_FIO_OPT_G_FILESTAT: opt_category_group =
    549755813888;
pub const opt_category_group_FIO_OPT_G_LIBCUFILE: opt_category_group =
    2199023255552;
pub const opt_category_group_FIO_OPT_G_DFS: opt_category_group = 4398046511104;
pub const opt_category_group_FIO_OPT_G_WINDOWSAIO: opt_category_group =
    17592186044416;
pub type opt_category_group = libc::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_rwlock {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mr {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_io_list {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_flow {
    pub _address: u8,
}
